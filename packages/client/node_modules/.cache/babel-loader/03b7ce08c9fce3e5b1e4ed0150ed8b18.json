{"ast":null,"code":"const puppeteer = require('puppeteer');\n\nasync function libraryScrapper() {\n  const link = 'https://www.library.uq.edu.au/';\n  const browser = await puppeteer.launch({\n    headless: true,\n    slowMo: 100,\n    devtools: true\n  });\n\n  try {\n    const page = await browser.newPage();\n    const librarySpaceAvailability = {};\n    await page.setViewport({\n      width: 1199,\n      height: 900\n    });\n    await page.goto(link);\n    await page.waitForSelector('#computersList .paper-item-0'); // Extract the space availability information from the site\n\n    const librarySpace = await page.evaluate(() => {\n      const rowNodeList = document.querySelectorAll('#computersList .paper-item-0 .computers-available');\n      const rowArray = Array.from(rowNodeList);\n      let links = rowArray.map(element => {\n        const librarySpaceText = element.innerText.split(' free of ');\n        return Math.floor(parseFloat(librarySpaceText[0]) / parseFloat(librarySpaceText[1]) * 100);\n      });\n      return links;\n    }); // Extract the library name information from the site\n\n    const libraryName = await page.evaluate(() => {\n      const rowNodeList = document.querySelectorAll('#computersList .paper-item-0 .linked-item');\n      const rowArray = Array.from(rowNodeList);\n      let links = rowArray.map(element => {\n        return element.innerText;\n      });\n      return links;\n    });\n    libraryName.forEach((library, index) => {\n      librarySpaceAvailability[library] = librarySpace[index];\n    });\n    await page.close();\n    await browser.close();\n    return librarySpaceAvailability;\n  } catch (error) {\n    console.log(error);\n    await browser.close();\n  }\n}\n\nexport default libraryScrapper;\n\nasync function main() {\n  const xx = await libraryScrapper();\n  console.log(xx);\n}\n\nmain();","map":{"version":3,"sources":["C:/Users/Sajjad Brohi/JavaScript Projects/RESTful API/packages/client/src/Scrapper.tsx"],"names":["puppeteer","require","libraryScrapper","link","browser","launch","headless","slowMo","devtools","page","newPage","librarySpaceAvailability","setViewport","width","height","goto","waitForSelector","librarySpace","evaluate","rowNodeList","document","querySelectorAll","rowArray","Array","from","links","map","element","librarySpaceText","innerText","split","Math","floor","parseFloat","libraryName","forEach","library","index","close","error","console","log","main","xx"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AAMA,eAAeC,eAAf,GAAiC;AAChC,QAAMC,IAAI,GAAG,gCAAb;AAEA,QAAMC,OAAO,GAAG,MAAMJ,SAAS,CAACK,MAAV,CAAiB;AACtCC,IAAAA,QAAQ,EAAE,IAD4B;AAEtCC,IAAAA,MAAM,EAAE,GAF8B;AAGtCC,IAAAA,QAAQ,EAAE;AAH4B,GAAjB,CAAtB;;AAMA,MAAI;AACH,UAAMC,IAAI,GAAG,MAAML,OAAO,CAACM,OAAR,EAAnB;AACA,UAAMC,wBAA4C,GAAG,EAArD;AAEA,UAAMF,IAAI,CAACG,WAAL,CAAiB;AAAEC,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,MAAM,EAAE;AAAvB,KAAjB,CAAN;AAEA,UAAML,IAAI,CAACM,IAAL,CAAUZ,IAAV,CAAN;AAEA,UAAMM,IAAI,CAACO,eAAL,CAAqB,8BAArB,CAAN,CARG,CAUH;;AACA,UAAMC,YAAY,GAAG,MAAMR,IAAI,CAACS,QAAL,CAAc,MAAM;AAC9C,YAAMC,WAAW,GAAGC,QAAQ,CAACC,gBAAT,CACnB,mDADmB,CAApB;AAGA,YAAMC,QAAQ,GAAGC,KAAK,CAACC,IAAN,CAAWL,WAAX,CAAjB;AACA,UAAIM,KAAK,GAAGH,QAAQ,CAACI,GAAT,CAAcC,OAAD,IAAa;AACrC,cAAMC,gBAAgB,GAAID,OAAD,CAAyBE,SAAzB,CAAmCC,KAAnC,CACxB,WADwB,CAAzB;AAGA,eAAOC,IAAI,CAACC,KAAL,CACLC,UAAU,CAACL,gBAAgB,CAAC,CAAD,CAAjB,CAAV,GAAkCK,UAAU,CAACL,gBAAgB,CAAC,CAAD,CAAjB,CAA7C,GACC,GAFK,CAAP;AAIA,OARW,CAAZ;AASA,aAAOH,KAAP;AACA,KAf0B,CAA3B,CAXG,CA4BH;;AACA,UAAMS,WAAW,GAAG,MAAMzB,IAAI,CAACS,QAAL,CAAc,MAAM;AAC7C,YAAMC,WAAW,GAAGC,QAAQ,CAACC,gBAAT,CACnB,2CADmB,CAApB;AAGA,YAAMC,QAAQ,GAAGC,KAAK,CAACC,IAAN,CAAWL,WAAX,CAAjB;AACA,UAAIM,KAAK,GAAGH,QAAQ,CAACI,GAAT,CAAcC,OAAD,IAAa;AACrC,eAAQA,OAAD,CAAyBE,SAAhC;AACA,OAFW,CAAZ;AAGA,aAAOJ,KAAP;AACA,KATyB,CAA1B;AAWAS,IAAAA,WAAW,CAACC,OAAZ,CAAoB,CAACC,OAAD,EAA2BC,KAA3B,KAAsD;AACzE1B,MAAAA,wBAAwB,CAACyB,OAAD,CAAxB,GAAoCnB,YAAY,CAACoB,KAAD,CAAhD;AACA,KAFD;AAIA,UAAM5B,IAAI,CAAC6B,KAAL,EAAN;AACA,UAAMlC,OAAO,CAACkC,KAAR,EAAN;AAEA,WAAO3B,wBAAP;AACA,GAhDD,CAgDE,OAAO4B,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,UAAMnC,OAAO,CAACkC,KAAR,EAAN;AACA;AACD;;AAED,eAAepC,eAAf;;AAEA,eAAewC,IAAf,GAAsB;AACrB,QAAMC,EAAE,GAAG,MAAMzC,eAAe,EAAhC;AAEAsC,EAAAA,OAAO,CAACC,GAAR,CAAYE,EAAZ;AACA;;AAEDD,IAAI","sourcesContent":["const puppeteer = require('puppeteer');\n\ninterface LibrarySpaceObject {\n\t[key: string]: string;\n}\n\nasync function libraryScrapper() {\n\tconst link = 'https://www.library.uq.edu.au/';\n\n\tconst browser = await puppeteer.launch({\n\t\theadless: true,\n\t\tslowMo: 100,\n\t\tdevtools: true,\n\t});\n\n\ttry {\n\t\tconst page = await browser.newPage();\n\t\tconst librarySpaceAvailability: LibrarySpaceObject = {};\n\n\t\tawait page.setViewport({ width: 1199, height: 900 });\n\n\t\tawait page.goto(link);\n\n\t\tawait page.waitForSelector('#computersList .paper-item-0');\n\n\t\t// Extract the space availability information from the site\n\t\tconst librarySpace = await page.evaluate(() => {\n\t\t\tconst rowNodeList = document.querySelectorAll(\n\t\t\t\t'#computersList .paper-item-0 .computers-available',\n\t\t\t);\n\t\t\tconst rowArray = Array.from(rowNodeList);\n\t\t\tlet links = rowArray.map((element) => {\n\t\t\t\tconst librarySpaceText = (element as HTMLElement).innerText.split(\n\t\t\t\t\t' free of ',\n\t\t\t\t);\n\t\t\t\treturn Math.floor(\n\t\t\t\t\t(parseFloat(librarySpaceText[0]) / parseFloat(librarySpaceText[1])) *\n\t\t\t\t\t\t100,\n\t\t\t\t);\n\t\t\t});\n\t\t\treturn links;\n\t\t});\n\n\t\t// Extract the library name information from the site\n\t\tconst libraryName = await page.evaluate(() => {\n\t\t\tconst rowNodeList = document.querySelectorAll(\n\t\t\t\t'#computersList .paper-item-0 .linked-item',\n\t\t\t);\n\t\t\tconst rowArray = Array.from(rowNodeList);\n\t\t\tlet links = rowArray.map((element) => {\n\t\t\t\treturn (element as HTMLElement).innerText;\n\t\t\t});\n\t\t\treturn links;\n\t\t});\n\n\t\tlibraryName.forEach((library: string | number, index: string | number) => {\n\t\t\tlibrarySpaceAvailability[library] = librarySpace[index];\n\t\t});\n\n\t\tawait page.close();\n\t\tawait browser.close();\n\n\t\treturn librarySpaceAvailability;\n\t} catch (error) {\n\t\tconsole.log(error);\n\t\tawait browser.close();\n\t}\n}\n\nexport default libraryScrapper;\n\nasync function main() {\n\tconst xx = await libraryScrapper();\n\n\tconsole.log(xx);\n}\n\nmain();\n"]},"metadata":{},"sourceType":"module"}