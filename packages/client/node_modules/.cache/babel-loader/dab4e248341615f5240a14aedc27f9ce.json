{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tracing = void 0;\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst assert_js_1 = require(\"./assert.js\");\n\nconst helper_js_1 = require(\"./helper.js\");\n/**\n * The Tracing class exposes the tracing audit interface.\n * @remarks\n * You can use `tracing.start` and `tracing.stop` to create a trace file\n * which can be opened in Chrome DevTools or {@link https://chromedevtools.github.io/timeline-viewer/ | timeline viewer}.\n *\n * @example\n * ```js\n * await page.tracing.start({path: 'trace.json'});\n * await page.goto('https://www.google.com');\n * await page.tracing.stop();\n * ```\n *\n * @public\n */\n\n\nclass Tracing {\n  /**\n   * @internal\n   */\n  constructor(client) {\n    this._recording = false;\n    this._path = '';\n    this._client = client;\n  }\n  /**\n   * Starts a trace for the current page.\n   * @remarks\n   * Only one trace can be active at a time per browser.\n   * @param options - Optional `TracingOptions`.\n   */\n\n\n  async start(options = {}) {\n    assert_js_1.assert(!this._recording, 'Cannot start recording trace while already recording trace.');\n    const defaultCategories = ['-*', 'devtools.timeline', 'v8.execute', 'disabled-by-default-devtools.timeline', 'disabled-by-default-devtools.timeline.frame', 'toplevel', 'blink.console', 'blink.user_timing', 'latencyInfo', 'disabled-by-default-devtools.timeline.stack', 'disabled-by-default-v8.cpu_profiler', 'disabled-by-default-v8.cpu_profiler.hires'];\n    const {\n      path = null,\n      screenshots = false,\n      categories = defaultCategories\n    } = options;\n    if (screenshots) categories.push('disabled-by-default-devtools.screenshot');\n    this._path = path;\n    this._recording = true;\n    await this._client.send('Tracing.start', {\n      transferMode: 'ReturnAsStream',\n      categories: categories.join(',')\n    });\n  }\n  /**\n   * Stops a trace started with the `start` method.\n   * @returns Promise which resolves to buffer with trace data.\n   */\n\n\n  async stop() {\n    let fulfill;\n    let reject;\n    const contentPromise = new Promise((x, y) => {\n      fulfill = x;\n      reject = y;\n    });\n\n    this._client.once('Tracing.tracingComplete', event => {\n      helper_js_1.helper.readProtocolStream(this._client, event.stream, this._path).then(fulfill, reject);\n    });\n\n    await this._client.send('Tracing.end');\n    this._recording = false;\n    return contentPromise;\n  }\n\n}\n\nexports.Tracing = Tracing;","map":{"version":3,"sources":["C:/Users/Sajjad Brohi/JavaScript Projects/RESTful API/packages/client/node_modules/puppeteer/lib/cjs/puppeteer/common/Tracing.js"],"names":["Object","defineProperty","exports","value","Tracing","assert_js_1","require","helper_js_1","constructor","client","_recording","_path","_client","start","options","assert","defaultCategories","path","screenshots","categories","push","send","transferMode","join","stop","fulfill","reject","contentPromise","Promise","x","y","once","event","helper","readProtocolStream","stream","then"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AACA;;;;;;;;;;;;;;;;AAeA,MAAMC,WAAW,GAAGC,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,aAAD,CAA3B;AACA;;;;;;;;;;;;;;;;;AAeA,MAAMF,OAAN,CAAc;AACV;;;AAGAI,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,SAAKC,UAAL,GAAkB,KAAlB;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,OAAL,GAAeH,MAAf;AACH;AACD;;;;;;;;AAMA,QAAMI,KAAN,CAAYC,OAAO,GAAG,EAAtB,EAA0B;AACtBT,IAAAA,WAAW,CAACU,MAAZ,CAAmB,CAAC,KAAKL,UAAzB,EAAqC,6DAArC;AACA,UAAMM,iBAAiB,GAAG,CACtB,IADsB,EAEtB,mBAFsB,EAGtB,YAHsB,EAItB,uCAJsB,EAKtB,6CALsB,EAMtB,UANsB,EAOtB,eAPsB,EAQtB,mBARsB,EAStB,aATsB,EAUtB,6CAVsB,EAWtB,qCAXsB,EAYtB,2CAZsB,CAA1B;AAcA,UAAM;AAAEC,MAAAA,IAAI,GAAG,IAAT;AAAeC,MAAAA,WAAW,GAAG,KAA7B;AAAoCC,MAAAA,UAAU,GAAGH;AAAjD,QAAwEF,OAA9E;AACA,QAAII,WAAJ,EACIC,UAAU,CAACC,IAAX,CAAgB,yCAAhB;AACJ,SAAKT,KAAL,GAAaM,IAAb;AACA,SAAKP,UAAL,GAAkB,IAAlB;AACA,UAAM,KAAKE,OAAL,CAAaS,IAAb,CAAkB,eAAlB,EAAmC;AACrCC,MAAAA,YAAY,EAAE,gBADuB;AAErCH,MAAAA,UAAU,EAAEA,UAAU,CAACI,IAAX,CAAgB,GAAhB;AAFyB,KAAnC,CAAN;AAIH;AACD;;;;;;AAIA,QAAMC,IAAN,GAAa;AACT,QAAIC,OAAJ;AACA,QAAIC,MAAJ;AACA,UAAMC,cAAc,GAAG,IAAIC,OAAJ,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACzCL,MAAAA,OAAO,GAAGI,CAAV;AACAH,MAAAA,MAAM,GAAGI,CAAT;AACH,KAHsB,CAAvB;;AAIA,SAAKlB,OAAL,CAAamB,IAAb,CAAkB,yBAAlB,EAA8CC,KAAD,IAAW;AACpDzB,MAAAA,WAAW,CAAC0B,MAAZ,CACKC,kBADL,CACwB,KAAKtB,OAD7B,EACsCoB,KAAK,CAACG,MAD5C,EACoD,KAAKxB,KADzD,EAEKyB,IAFL,CAEUX,OAFV,EAEmBC,MAFnB;AAGH,KAJD;;AAKA,UAAM,KAAKd,OAAL,CAAaS,IAAb,CAAkB,aAAlB,CAAN;AACA,SAAKX,UAAL,GAAkB,KAAlB;AACA,WAAOiB,cAAP;AACH;;AA5DS;;AA8DdzB,OAAO,CAACE,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tracing = void 0;\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst assert_js_1 = require(\"./assert.js\");\nconst helper_js_1 = require(\"./helper.js\");\n/**\n * The Tracing class exposes the tracing audit interface.\n * @remarks\n * You can use `tracing.start` and `tracing.stop` to create a trace file\n * which can be opened in Chrome DevTools or {@link https://chromedevtools.github.io/timeline-viewer/ | timeline viewer}.\n *\n * @example\n * ```js\n * await page.tracing.start({path: 'trace.json'});\n * await page.goto('https://www.google.com');\n * await page.tracing.stop();\n * ```\n *\n * @public\n */\nclass Tracing {\n    /**\n     * @internal\n     */\n    constructor(client) {\n        this._recording = false;\n        this._path = '';\n        this._client = client;\n    }\n    /**\n     * Starts a trace for the current page.\n     * @remarks\n     * Only one trace can be active at a time per browser.\n     * @param options - Optional `TracingOptions`.\n     */\n    async start(options = {}) {\n        assert_js_1.assert(!this._recording, 'Cannot start recording trace while already recording trace.');\n        const defaultCategories = [\n            '-*',\n            'devtools.timeline',\n            'v8.execute',\n            'disabled-by-default-devtools.timeline',\n            'disabled-by-default-devtools.timeline.frame',\n            'toplevel',\n            'blink.console',\n            'blink.user_timing',\n            'latencyInfo',\n            'disabled-by-default-devtools.timeline.stack',\n            'disabled-by-default-v8.cpu_profiler',\n            'disabled-by-default-v8.cpu_profiler.hires',\n        ];\n        const { path = null, screenshots = false, categories = defaultCategories, } = options;\n        if (screenshots)\n            categories.push('disabled-by-default-devtools.screenshot');\n        this._path = path;\n        this._recording = true;\n        await this._client.send('Tracing.start', {\n            transferMode: 'ReturnAsStream',\n            categories: categories.join(','),\n        });\n    }\n    /**\n     * Stops a trace started with the `start` method.\n     * @returns Promise which resolves to buffer with trace data.\n     */\n    async stop() {\n        let fulfill;\n        let reject;\n        const contentPromise = new Promise((x, y) => {\n            fulfill = x;\n            reject = y;\n        });\n        this._client.once('Tracing.tracingComplete', (event) => {\n            helper_js_1.helper\n                .readProtocolStream(this._client, event.stream, this._path)\n                .then(fulfill, reject);\n        });\n        await this._client.send('Tracing.end');\n        this._recording = false;\n        return contentPromise;\n    }\n}\nexports.Tracing = Tracing;\n"]},"metadata":{},"sourceType":"script"}