{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HTTPRequest = void 0;\n\nconst assert_js_1 = require(\"./assert.js\");\n\nconst helper_js_1 = require(\"./helper.js\");\n/**\n *\n * Represents an HTTP request sent by a page.\n * @remarks\n *\n * Whenever the page sends a request, such as for a network resource, the\n * following events are emitted by Puppeteer's `page`:\n *\n * - `request`:  emitted when the request is issued by the page.\n * - `requestfinished` - emitted when the response body is downloaded and the\n *   request is complete.\n *\n * If request fails at some point, then instead of `requestfinished` event the\n * `requestfailed` event is emitted.\n *\n * All of these events provide an instance of `HTTPRequest` representing the\n * request that occurred:\n *\n * ```\n * page.on('request', request => ...)\n * ```\n *\n * NOTE: HTTP Error responses, such as 404 or 503, are still successful\n * responses from HTTP standpoint, so request will complete with\n * `requestfinished` event.\n *\n * If request gets a 'redirect' response, the request is successfully finished\n * with the `requestfinished` event, and a new request is issued to a\n * redirected url.\n *\n * @public\n */\n\n\nclass HTTPRequest {\n  /**\n   * @internal\n   */\n  constructor(client, frame, interceptionId, allowInterception, event, redirectChain) {\n    /**\n     * @internal\n     */\n    this._failureText = null;\n    /**\n     * @internal\n     */\n\n    this._response = null;\n    /**\n     * @internal\n     */\n\n    this._fromMemoryCache = false;\n    this._interceptionHandled = false;\n    this._headers = {};\n    this._client = client;\n    this._requestId = event.requestId;\n    this._isNavigationRequest = event.requestId === event.loaderId && event.type === 'Document';\n    this._interceptionId = interceptionId;\n    this._allowInterception = allowInterception;\n    this._url = event.request.url;\n    this._resourceType = event.type.toLowerCase();\n    this._method = event.request.method;\n    this._postData = event.request.postData;\n    this._frame = frame;\n    this._redirectChain = redirectChain;\n\n    for (const key of Object.keys(event.request.headers)) this._headers[key.toLowerCase()] = event.request.headers[key];\n  }\n  /**\n   * @returns the URL of the request\n   */\n\n\n  url() {\n    return this._url;\n  }\n  /**\n   * Contains the request's resource type as it was perceived by the rendering\n   * engine.\n   * @remarks\n   * @returns one of the following: `document`, `stylesheet`, `image`, `media`,\n   * `font`, `script`, `texttrack`, `xhr`, `fetch`, `eventsource`, `websocket`,\n   * `manifest`, `other`.\n   */\n\n\n  resourceType() {\n    // TODO (@jackfranklin): protocol.d.ts has a type for this, but all the\n    // string values are uppercase. The Puppeteer docs explicitly say the\n    // potential values are all lower case, and the constructor takes the event\n    // type and calls toLowerCase() on it, so we can't reuse the type from the\n    // protocol.d.ts. Why do we lower case?\n    return this._resourceType;\n  }\n  /**\n   * @returns the method used (`GET`, `POST`, etc.)\n   */\n\n\n  method() {\n    return this._method;\n  }\n  /**\n   * @returns the request's post body, if any.\n   */\n\n\n  postData() {\n    return this._postData;\n  }\n  /**\n   * @returns an object with HTTP headers associated with the request. All\n   * header names are lower-case.\n   */\n\n\n  headers() {\n    return this._headers;\n  }\n  /**\n   * @returns the response for this request, if a response has been received.\n   */\n\n\n  response() {\n    return this._response;\n  }\n  /**\n   * @returns the frame that initiated the request.\n   */\n\n\n  frame() {\n    return this._frame;\n  }\n  /**\n   * @returns true if the request is the driver of the current frame's navigation.\n   */\n\n\n  isNavigationRequest() {\n    return this._isNavigationRequest;\n  }\n  /**\n   * @remarks\n   *\n   * `redirectChain` is shared between all the requests of the same chain.\n   *\n   * For example, if the website `http://example.com` has a single redirect to\n   * `https://example.com`, then the chain will contain one request:\n   *\n   * ```js\n   * const response = await page.goto('http://example.com');\n   * const chain = response.request().redirectChain();\n   * console.log(chain.length); // 1\n   * console.log(chain[0].url()); // 'http://example.com'\n   * ```\n   *\n   * If the website `https://google.com` has no redirects, then the chain will be empty:\n   *\n   * ```js\n   * const response = await page.goto('https://google.com');\n   * const chain = response.request().redirectChain();\n   * console.log(chain.length); // 0\n   * ```\n   *\n   * @returns the chain of requests - if a server responds with at least a\n   * single redirect, this chain will contain all requests that were redirected.\n   */\n\n\n  redirectChain() {\n    return this._redirectChain.slice();\n  }\n  /**\n   * Access information about the request's failure.\n   *\n   * @remarks\n   *\n   * @example\n   *\n   * Example of logging all failed requests:\n   *\n   * ```js\n   * page.on('requestfailed', request => {\n   *   console.log(request.url() + ' ' + request.failure().errorText);\n   * });\n   * ```\n   *\n   * @returns `null` unless the request failed. If the request fails this can\n   * return an object with `errorText` containing a human-readable error\n   * message, e.g. `net::ERR_FAILED`. It is not guaranteeded that there will be\n   * failure text if the request fails.\n   */\n\n\n  failure() {\n    if (!this._failureText) return null;\n    return {\n      errorText: this._failureText\n    };\n  }\n  /**\n   * Continues request with optional request overrides.\n   *\n   * @remarks\n   *\n   * To use this, request\n   * interception should be enabled with {@link Page.setRequestInterception}.\n   *\n   * Exception is immediately thrown if the request interception is not enabled.\n   *\n   * @example\n   * ```js\n   * await page.setRequestInterception(true);\n   * page.on('request', request => {\n   *   // Override headers\n   *   const headers = Object.assign({}, request.headers(), {\n   *     foo: 'bar', // set \"foo\" header\n   *     origin: undefined, // remove \"origin\" header\n   *   });\n   *   request.continue({headers});\n   * });\n   * ```\n   *\n   * @param overrides - optional overrides to apply to the request.\n   */\n\n\n  async continue(overrides = {}) {\n    // Request interception is not supported for data: urls.\n    if (this._url.startsWith('data:')) return;\n    assert_js_1.assert(this._allowInterception, 'Request Interception is not enabled!');\n    assert_js_1.assert(!this._interceptionHandled, 'Request is already handled!');\n    const {\n      url,\n      method,\n      postData,\n      headers\n    } = overrides;\n    this._interceptionHandled = true;\n    const postDataBinaryBase64 = postData ? Buffer.from(postData).toString('base64') : undefined;\n    await this._client.send('Fetch.continueRequest', {\n      requestId: this._interceptionId,\n      url,\n      method,\n      postData: postDataBinaryBase64,\n      headers: headers ? headersArray(headers) : undefined\n    }).catch(error => {\n      // In certain cases, protocol will return error if the request was\n      // already canceled or the page was closed. We should tolerate these\n      // errors.\n      helper_js_1.debugError(error);\n    });\n  }\n  /**\n   * Fulfills a request with the given response.\n   *\n   * @remarks\n   *\n   * To use this, request\n   * interception should be enabled with {@link Page.setRequestInterception}.\n   *\n   * Exception is immediately thrown if the request interception is not enabled.\n   *\n   * @example\n   * An example of fulfilling all requests with 404 responses:\n   * ```js\n   * await page.setRequestInterception(true);\n   * page.on('request', request => {\n   *   request.respond({\n   *     status: 404,\n   *     contentType: 'text/plain',\n   *     body: 'Not Found!'\n   *   });\n   * });\n   * ```\n   *\n   * NOTE: Mocking responses for dataURL requests is not supported.\n   * Calling `request.respond` for a dataURL request is a noop.\n   *\n   * @param response - the response to fulfill the request with.\n   */\n\n\n  async respond(response) {\n    // Mocking responses for dataURL requests is not currently supported.\n    if (this._url.startsWith('data:')) return;\n    assert_js_1.assert(this._allowInterception, 'Request Interception is not enabled!');\n    assert_js_1.assert(!this._interceptionHandled, 'Request is already handled!');\n    this._interceptionHandled = true;\n    const responseBody = response.body && helper_js_1.helper.isString(response.body) ? Buffer.from(response.body) : response.body || null;\n    const responseHeaders = {};\n\n    if (response.headers) {\n      for (const header of Object.keys(response.headers)) responseHeaders[header.toLowerCase()] = response.headers[header];\n    }\n\n    if (response.contentType) responseHeaders['content-type'] = response.contentType;\n    if (responseBody && !('content-length' in responseHeaders)) responseHeaders['content-length'] = String(Buffer.byteLength(responseBody));\n    await this._client.send('Fetch.fulfillRequest', {\n      requestId: this._interceptionId,\n      responseCode: response.status || 200,\n      responsePhrase: STATUS_TEXTS[response.status || 200],\n      responseHeaders: headersArray(responseHeaders),\n      body: responseBody ? responseBody.toString('base64') : undefined\n    }).catch(error => {\n      // In certain cases, protocol will return error if the request was\n      // already canceled or the page was closed. We should tolerate these\n      // errors.\n      helper_js_1.debugError(error);\n    });\n  }\n  /**\n   * Aborts a request.\n   *\n   * @remarks\n   * To use this, request interception should be enabled with\n   * {@link Page.setRequestInterception}. If it is not enabled, this method will\n   * throw an exception immediately.\n   *\n   * @param errorCode - optional error code to provide.\n   */\n\n\n  async abort(errorCode = 'failed') {\n    // Request interception is not supported for data: urls.\n    if (this._url.startsWith('data:')) return;\n    const errorReason = errorReasons[errorCode];\n    assert_js_1.assert(errorReason, 'Unknown error code: ' + errorCode);\n    assert_js_1.assert(this._allowInterception, 'Request Interception is not enabled!');\n    assert_js_1.assert(!this._interceptionHandled, 'Request is already handled!');\n    this._interceptionHandled = true;\n    await this._client.send('Fetch.failRequest', {\n      requestId: this._interceptionId,\n      errorReason\n    }).catch(error => {\n      // In certain cases, protocol will return error if the request was\n      // already canceled or the page was closed. We should tolerate these\n      // errors.\n      helper_js_1.debugError(error);\n    });\n  }\n\n}\n\nexports.HTTPRequest = HTTPRequest;\nconst errorReasons = {\n  aborted: 'Aborted',\n  accessdenied: 'AccessDenied',\n  addressunreachable: 'AddressUnreachable',\n  blockedbyclient: 'BlockedByClient',\n  blockedbyresponse: 'BlockedByResponse',\n  connectionaborted: 'ConnectionAborted',\n  connectionclosed: 'ConnectionClosed',\n  connectionfailed: 'ConnectionFailed',\n  connectionrefused: 'ConnectionRefused',\n  connectionreset: 'ConnectionReset',\n  internetdisconnected: 'InternetDisconnected',\n  namenotresolved: 'NameNotResolved',\n  timedout: 'TimedOut',\n  failed: 'Failed'\n};\n\nfunction headersArray(headers) {\n  const result = [];\n\n  for (const name in headers) {\n    if (!Object.is(headers[name], undefined)) result.push({\n      name,\n      value: headers[name] + ''\n    });\n  }\n\n  return result;\n} // List taken from\n// https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n// with extra 306 and 418 codes.\n\n\nconst STATUS_TEXTS = {\n  '100': 'Continue',\n  '101': 'Switching Protocols',\n  '102': 'Processing',\n  '103': 'Early Hints',\n  '200': 'OK',\n  '201': 'Created',\n  '202': 'Accepted',\n  '203': 'Non-Authoritative Information',\n  '204': 'No Content',\n  '205': 'Reset Content',\n  '206': 'Partial Content',\n  '207': 'Multi-Status',\n  '208': 'Already Reported',\n  '226': 'IM Used',\n  '300': 'Multiple Choices',\n  '301': 'Moved Permanently',\n  '302': 'Found',\n  '303': 'See Other',\n  '304': 'Not Modified',\n  '305': 'Use Proxy',\n  '306': 'Switch Proxy',\n  '307': 'Temporary Redirect',\n  '308': 'Permanent Redirect',\n  '400': 'Bad Request',\n  '401': 'Unauthorized',\n  '402': 'Payment Required',\n  '403': 'Forbidden',\n  '404': 'Not Found',\n  '405': 'Method Not Allowed',\n  '406': 'Not Acceptable',\n  '407': 'Proxy Authentication Required',\n  '408': 'Request Timeout',\n  '409': 'Conflict',\n  '410': 'Gone',\n  '411': 'Length Required',\n  '412': 'Precondition Failed',\n  '413': 'Payload Too Large',\n  '414': 'URI Too Long',\n  '415': 'Unsupported Media Type',\n  '416': 'Range Not Satisfiable',\n  '417': 'Expectation Failed',\n  '418': \"I'm a teapot\",\n  '421': 'Misdirected Request',\n  '422': 'Unprocessable Entity',\n  '423': 'Locked',\n  '424': 'Failed Dependency',\n  '425': 'Too Early',\n  '426': 'Upgrade Required',\n  '428': 'Precondition Required',\n  '429': 'Too Many Requests',\n  '431': 'Request Header Fields Too Large',\n  '451': 'Unavailable For Legal Reasons',\n  '500': 'Internal Server Error',\n  '501': 'Not Implemented',\n  '502': 'Bad Gateway',\n  '503': 'Service Unavailable',\n  '504': 'Gateway Timeout',\n  '505': 'HTTP Version Not Supported',\n  '506': 'Variant Also Negotiates',\n  '507': 'Insufficient Storage',\n  '508': 'Loop Detected',\n  '510': 'Not Extended',\n  '511': 'Network Authentication Required'\n};","map":{"version":3,"sources":["C:/Users/Sajjad Brohi/JavaScript Projects/RESTful API/packages/client/node_modules/puppeteer/lib/cjs/puppeteer/common/HTTPRequest.js"],"names":["Object","defineProperty","exports","value","HTTPRequest","assert_js_1","require","helper_js_1","constructor","client","frame","interceptionId","allowInterception","event","redirectChain","_failureText","_response","_fromMemoryCache","_interceptionHandled","_headers","_client","_requestId","requestId","_isNavigationRequest","loaderId","type","_interceptionId","_allowInterception","_url","request","url","_resourceType","toLowerCase","_method","method","_postData","postData","_frame","_redirectChain","key","keys","headers","resourceType","response","isNavigationRequest","slice","failure","errorText","continue","overrides","startsWith","assert","postDataBinaryBase64","Buffer","from","toString","undefined","send","headersArray","catch","error","debugError","respond","responseBody","body","helper","isString","responseHeaders","header","contentType","String","byteLength","responseCode","status","responsePhrase","STATUS_TEXTS","abort","errorCode","errorReason","errorReasons","aborted","accessdenied","addressunreachable","blockedbyclient","blockedbyresponse","connectionaborted","connectionclosed","connectionfailed","connectionrefused","connectionreset","internetdisconnected","namenotresolved","timedout","failed","result","name","is","push"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HTTPRequest = void 0;\nconst assert_js_1 = require(\"./assert.js\");\nconst helper_js_1 = require(\"./helper.js\");\n/**\n *\n * Represents an HTTP request sent by a page.\n * @remarks\n *\n * Whenever the page sends a request, such as for a network resource, the\n * following events are emitted by Puppeteer's `page`:\n *\n * - `request`:  emitted when the request is issued by the page.\n * - `requestfinished` - emitted when the response body is downloaded and the\n *   request is complete.\n *\n * If request fails at some point, then instead of `requestfinished` event the\n * `requestfailed` event is emitted.\n *\n * All of these events provide an instance of `HTTPRequest` representing the\n * request that occurred:\n *\n * ```\n * page.on('request', request => ...)\n * ```\n *\n * NOTE: HTTP Error responses, such as 404 or 503, are still successful\n * responses from HTTP standpoint, so request will complete with\n * `requestfinished` event.\n *\n * If request gets a 'redirect' response, the request is successfully finished\n * with the `requestfinished` event, and a new request is issued to a\n * redirected url.\n *\n * @public\n */\nclass HTTPRequest {\n    /**\n     * @internal\n     */\n    constructor(client, frame, interceptionId, allowInterception, event, redirectChain) {\n        /**\n         * @internal\n         */\n        this._failureText = null;\n        /**\n         * @internal\n         */\n        this._response = null;\n        /**\n         * @internal\n         */\n        this._fromMemoryCache = false;\n        this._interceptionHandled = false;\n        this._headers = {};\n        this._client = client;\n        this._requestId = event.requestId;\n        this._isNavigationRequest =\n            event.requestId === event.loaderId && event.type === 'Document';\n        this._interceptionId = interceptionId;\n        this._allowInterception = allowInterception;\n        this._url = event.request.url;\n        this._resourceType = event.type.toLowerCase();\n        this._method = event.request.method;\n        this._postData = event.request.postData;\n        this._frame = frame;\n        this._redirectChain = redirectChain;\n        for (const key of Object.keys(event.request.headers))\n            this._headers[key.toLowerCase()] = event.request.headers[key];\n    }\n    /**\n     * @returns the URL of the request\n     */\n    url() {\n        return this._url;\n    }\n    /**\n     * Contains the request's resource type as it was perceived by the rendering\n     * engine.\n     * @remarks\n     * @returns one of the following: `document`, `stylesheet`, `image`, `media`,\n     * `font`, `script`, `texttrack`, `xhr`, `fetch`, `eventsource`, `websocket`,\n     * `manifest`, `other`.\n     */\n    resourceType() {\n        // TODO (@jackfranklin): protocol.d.ts has a type for this, but all the\n        // string values are uppercase. The Puppeteer docs explicitly say the\n        // potential values are all lower case, and the constructor takes the event\n        // type and calls toLowerCase() on it, so we can't reuse the type from the\n        // protocol.d.ts. Why do we lower case?\n        return this._resourceType;\n    }\n    /**\n     * @returns the method used (`GET`, `POST`, etc.)\n     */\n    method() {\n        return this._method;\n    }\n    /**\n     * @returns the request's post body, if any.\n     */\n    postData() {\n        return this._postData;\n    }\n    /**\n     * @returns an object with HTTP headers associated with the request. All\n     * header names are lower-case.\n     */\n    headers() {\n        return this._headers;\n    }\n    /**\n     * @returns the response for this request, if a response has been received.\n     */\n    response() {\n        return this._response;\n    }\n    /**\n     * @returns the frame that initiated the request.\n     */\n    frame() {\n        return this._frame;\n    }\n    /**\n     * @returns true if the request is the driver of the current frame's navigation.\n     */\n    isNavigationRequest() {\n        return this._isNavigationRequest;\n    }\n    /**\n     * @remarks\n     *\n     * `redirectChain` is shared between all the requests of the same chain.\n     *\n     * For example, if the website `http://example.com` has a single redirect to\n     * `https://example.com`, then the chain will contain one request:\n     *\n     * ```js\n     * const response = await page.goto('http://example.com');\n     * const chain = response.request().redirectChain();\n     * console.log(chain.length); // 1\n     * console.log(chain[0].url()); // 'http://example.com'\n     * ```\n     *\n     * If the website `https://google.com` has no redirects, then the chain will be empty:\n     *\n     * ```js\n     * const response = await page.goto('https://google.com');\n     * const chain = response.request().redirectChain();\n     * console.log(chain.length); // 0\n     * ```\n     *\n     * @returns the chain of requests - if a server responds with at least a\n     * single redirect, this chain will contain all requests that were redirected.\n     */\n    redirectChain() {\n        return this._redirectChain.slice();\n    }\n    /**\n     * Access information about the request's failure.\n     *\n     * @remarks\n     *\n     * @example\n     *\n     * Example of logging all failed requests:\n     *\n     * ```js\n     * page.on('requestfailed', request => {\n     *   console.log(request.url() + ' ' + request.failure().errorText);\n     * });\n     * ```\n     *\n     * @returns `null` unless the request failed. If the request fails this can\n     * return an object with `errorText` containing a human-readable error\n     * message, e.g. `net::ERR_FAILED`. It is not guaranteeded that there will be\n     * failure text if the request fails.\n     */\n    failure() {\n        if (!this._failureText)\n            return null;\n        return {\n            errorText: this._failureText,\n        };\n    }\n    /**\n     * Continues request with optional request overrides.\n     *\n     * @remarks\n     *\n     * To use this, request\n     * interception should be enabled with {@link Page.setRequestInterception}.\n     *\n     * Exception is immediately thrown if the request interception is not enabled.\n     *\n     * @example\n     * ```js\n     * await page.setRequestInterception(true);\n     * page.on('request', request => {\n     *   // Override headers\n     *   const headers = Object.assign({}, request.headers(), {\n     *     foo: 'bar', // set \"foo\" header\n     *     origin: undefined, // remove \"origin\" header\n     *   });\n     *   request.continue({headers});\n     * });\n     * ```\n     *\n     * @param overrides - optional overrides to apply to the request.\n     */\n    async continue(overrides = {}) {\n        // Request interception is not supported for data: urls.\n        if (this._url.startsWith('data:'))\n            return;\n        assert_js_1.assert(this._allowInterception, 'Request Interception is not enabled!');\n        assert_js_1.assert(!this._interceptionHandled, 'Request is already handled!');\n        const { url, method, postData, headers } = overrides;\n        this._interceptionHandled = true;\n        const postDataBinaryBase64 = postData\n            ? Buffer.from(postData).toString('base64')\n            : undefined;\n        await this._client\n            .send('Fetch.continueRequest', {\n            requestId: this._interceptionId,\n            url,\n            method,\n            postData: postDataBinaryBase64,\n            headers: headers ? headersArray(headers) : undefined,\n        })\n            .catch((error) => {\n            // In certain cases, protocol will return error if the request was\n            // already canceled or the page was closed. We should tolerate these\n            // errors.\n            helper_js_1.debugError(error);\n        });\n    }\n    /**\n     * Fulfills a request with the given response.\n     *\n     * @remarks\n     *\n     * To use this, request\n     * interception should be enabled with {@link Page.setRequestInterception}.\n     *\n     * Exception is immediately thrown if the request interception is not enabled.\n     *\n     * @example\n     * An example of fulfilling all requests with 404 responses:\n     * ```js\n     * await page.setRequestInterception(true);\n     * page.on('request', request => {\n     *   request.respond({\n     *     status: 404,\n     *     contentType: 'text/plain',\n     *     body: 'Not Found!'\n     *   });\n     * });\n     * ```\n     *\n     * NOTE: Mocking responses for dataURL requests is not supported.\n     * Calling `request.respond` for a dataURL request is a noop.\n     *\n     * @param response - the response to fulfill the request with.\n     */\n    async respond(response) {\n        // Mocking responses for dataURL requests is not currently supported.\n        if (this._url.startsWith('data:'))\n            return;\n        assert_js_1.assert(this._allowInterception, 'Request Interception is not enabled!');\n        assert_js_1.assert(!this._interceptionHandled, 'Request is already handled!');\n        this._interceptionHandled = true;\n        const responseBody = response.body && helper_js_1.helper.isString(response.body)\n            ? Buffer.from(response.body)\n            : response.body || null;\n        const responseHeaders = {};\n        if (response.headers) {\n            for (const header of Object.keys(response.headers))\n                responseHeaders[header.toLowerCase()] = response.headers[header];\n        }\n        if (response.contentType)\n            responseHeaders['content-type'] = response.contentType;\n        if (responseBody && !('content-length' in responseHeaders))\n            responseHeaders['content-length'] = String(Buffer.byteLength(responseBody));\n        await this._client\n            .send('Fetch.fulfillRequest', {\n            requestId: this._interceptionId,\n            responseCode: response.status || 200,\n            responsePhrase: STATUS_TEXTS[response.status || 200],\n            responseHeaders: headersArray(responseHeaders),\n            body: responseBody ? responseBody.toString('base64') : undefined,\n        })\n            .catch((error) => {\n            // In certain cases, protocol will return error if the request was\n            // already canceled or the page was closed. We should tolerate these\n            // errors.\n            helper_js_1.debugError(error);\n        });\n    }\n    /**\n     * Aborts a request.\n     *\n     * @remarks\n     * To use this, request interception should be enabled with\n     * {@link Page.setRequestInterception}. If it is not enabled, this method will\n     * throw an exception immediately.\n     *\n     * @param errorCode - optional error code to provide.\n     */\n    async abort(errorCode = 'failed') {\n        // Request interception is not supported for data: urls.\n        if (this._url.startsWith('data:'))\n            return;\n        const errorReason = errorReasons[errorCode];\n        assert_js_1.assert(errorReason, 'Unknown error code: ' + errorCode);\n        assert_js_1.assert(this._allowInterception, 'Request Interception is not enabled!');\n        assert_js_1.assert(!this._interceptionHandled, 'Request is already handled!');\n        this._interceptionHandled = true;\n        await this._client\n            .send('Fetch.failRequest', {\n            requestId: this._interceptionId,\n            errorReason,\n        })\n            .catch((error) => {\n            // In certain cases, protocol will return error if the request was\n            // already canceled or the page was closed. We should tolerate these\n            // errors.\n            helper_js_1.debugError(error);\n        });\n    }\n}\nexports.HTTPRequest = HTTPRequest;\nconst errorReasons = {\n    aborted: 'Aborted',\n    accessdenied: 'AccessDenied',\n    addressunreachable: 'AddressUnreachable',\n    blockedbyclient: 'BlockedByClient',\n    blockedbyresponse: 'BlockedByResponse',\n    connectionaborted: 'ConnectionAborted',\n    connectionclosed: 'ConnectionClosed',\n    connectionfailed: 'ConnectionFailed',\n    connectionrefused: 'ConnectionRefused',\n    connectionreset: 'ConnectionReset',\n    internetdisconnected: 'InternetDisconnected',\n    namenotresolved: 'NameNotResolved',\n    timedout: 'TimedOut',\n    failed: 'Failed',\n};\nfunction headersArray(headers) {\n    const result = [];\n    for (const name in headers) {\n        if (!Object.is(headers[name], undefined))\n            result.push({ name, value: headers[name] + '' });\n    }\n    return result;\n}\n// List taken from\n// https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n// with extra 306 and 418 codes.\nconst STATUS_TEXTS = {\n    '100': 'Continue',\n    '101': 'Switching Protocols',\n    '102': 'Processing',\n    '103': 'Early Hints',\n    '200': 'OK',\n    '201': 'Created',\n    '202': 'Accepted',\n    '203': 'Non-Authoritative Information',\n    '204': 'No Content',\n    '205': 'Reset Content',\n    '206': 'Partial Content',\n    '207': 'Multi-Status',\n    '208': 'Already Reported',\n    '226': 'IM Used',\n    '300': 'Multiple Choices',\n    '301': 'Moved Permanently',\n    '302': 'Found',\n    '303': 'See Other',\n    '304': 'Not Modified',\n    '305': 'Use Proxy',\n    '306': 'Switch Proxy',\n    '307': 'Temporary Redirect',\n    '308': 'Permanent Redirect',\n    '400': 'Bad Request',\n    '401': 'Unauthorized',\n    '402': 'Payment Required',\n    '403': 'Forbidden',\n    '404': 'Not Found',\n    '405': 'Method Not Allowed',\n    '406': 'Not Acceptable',\n    '407': 'Proxy Authentication Required',\n    '408': 'Request Timeout',\n    '409': 'Conflict',\n    '410': 'Gone',\n    '411': 'Length Required',\n    '412': 'Precondition Failed',\n    '413': 'Payload Too Large',\n    '414': 'URI Too Long',\n    '415': 'Unsupported Media Type',\n    '416': 'Range Not Satisfiable',\n    '417': 'Expectation Failed',\n    '418': \"I'm a teapot\",\n    '421': 'Misdirected Request',\n    '422': 'Unprocessable Entity',\n    '423': 'Locked',\n    '424': 'Failed Dependency',\n    '425': 'Too Early',\n    '426': 'Upgrade Required',\n    '428': 'Precondition Required',\n    '429': 'Too Many Requests',\n    '431': 'Request Header Fields Too Large',\n    '451': 'Unavailable For Legal Reasons',\n    '500': 'Internal Server Error',\n    '501': 'Not Implemented',\n    '502': 'Bad Gateway',\n    '503': 'Service Unavailable',\n    '504': 'Gateway Timeout',\n    '505': 'HTTP Version Not Supported',\n    '506': 'Variant Also Negotiates',\n    '507': 'Insufficient Storage',\n    '508': 'Loop Detected',\n    '510': 'Not Extended',\n    '511': 'Network Authentication Required',\n};\n"]},"metadata":{},"sourceType":"script"}