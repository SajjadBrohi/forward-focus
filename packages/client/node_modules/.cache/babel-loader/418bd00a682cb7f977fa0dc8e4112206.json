{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ElementHandle = exports.JSHandle = exports.createJSHandle = void 0;\n\nconst assert_js_1 = require(\"./assert.js\");\n\nconst helper_js_1 = require(\"./helper.js\");\n\nconst QueryHandler_js_1 = require(\"./QueryHandler.js\");\n/**\n * @internal\n */\n\n\nfunction createJSHandle(context, remoteObject) {\n  const frame = context.frame();\n\n  if (remoteObject.subtype === 'node' && frame) {\n    const frameManager = frame._frameManager;\n    return new ElementHandle(context, context._client, remoteObject, frameManager.page(), frameManager);\n  }\n\n  return new JSHandle(context, context._client, remoteObject);\n}\n\nexports.createJSHandle = createJSHandle;\n/**\n * Represents an in-page JavaScript object. JSHandles can be created with the\n * {@link Page.evaluateHandle | page.evaluateHandle} method.\n *\n * @example\n * ```js\n * const windowHandle = await page.evaluateHandle(() => window);\n * ```\n *\n * JSHandle prevents the referenced JavaScript object from being garbage-collected\n * unless the handle is {@link JSHandle.dispose | disposed}. JSHandles are auto-\n * disposed when their origin frame gets navigated or the parent context gets destroyed.\n *\n * JSHandle instances can be used as arguments for {@link Page.$eval},\n * {@link Page.evaluate}, and {@link Page.evaluateHandle}.\n *\n * @public\n */\n\nclass JSHandle {\n  /**\n   * @internal\n   */\n  constructor(context, client, remoteObject) {\n    /**\n     * @internal\n     */\n    this._disposed = false;\n    this._context = context;\n    this._client = client;\n    this._remoteObject = remoteObject;\n  }\n  /** Returns the execution context the handle belongs to.\n   */\n\n\n  executionContext() {\n    return this._context;\n  }\n  /**\n   * This method passes this handle as the first argument to `pageFunction`.\n   * If `pageFunction` returns a Promise, then `handle.evaluate` would wait\n   * for the promise to resolve and return its value.\n   *\n   * @example\n   * ```js\n   * const tweetHandle = await page.$('.tweet .retweets');\n   * expect(await tweetHandle.evaluate(node => node.innerText)).toBe('10');\n   * ```\n   */\n\n\n  async evaluate(pageFunction, ...args) {\n    return await this.executionContext().evaluate(pageFunction, this, ...args);\n  }\n  /**\n   * This method passes this handle as the first argument to `pageFunction`.\n   *\n   * @remarks\n   *\n   * The only difference between `jsHandle.evaluate` and\n   * `jsHandle.evaluateHandle` is that `jsHandle.evaluateHandle`\n   * returns an in-page object (JSHandle).\n   *\n   * If the function passed to `jsHandle.evaluateHandle` returns a Promise,\n   * then `evaluateHandle.evaluateHandle` waits for the promise to resolve and\n   * returns its value.\n   *\n   * See {@link Page.evaluateHandle} for more details.\n   */\n\n\n  async evaluateHandle(pageFunction, ...args) {\n    return await this.executionContext().evaluateHandle(pageFunction, this, ...args);\n  }\n  /** Fetches a single property from the referenced object.\n   */\n\n\n  async getProperty(propertyName) {\n    const objectHandle = await this.evaluateHandle((object, propertyName) => {\n      const result = {\n        __proto__: null\n      };\n      result[propertyName] = object[propertyName];\n      return result;\n    }, propertyName);\n    const properties = await objectHandle.getProperties();\n    const result = properties.get(propertyName) || null;\n    await objectHandle.dispose();\n    return result;\n  }\n  /**\n   * The method returns a map with property names as keys and JSHandle\n   * instances for the property values.\n   *\n   * @example\n   * ```js\n   * const listHandle = await page.evaluateHandle(() => document.body.children);\n   * const properties = await listHandle.getProperties();\n   * const children = [];\n   * for (const property of properties.values()) {\n   *   const element = property.asElement();\n   *   if (element)\n   *     children.push(element);\n   * }\n   * children; // holds elementHandles to all children of document.body\n   * ```\n   */\n\n\n  async getProperties() {\n    const response = await this._client.send('Runtime.getProperties', {\n      objectId: this._remoteObject.objectId,\n      ownProperties: true\n    });\n    const result = new Map();\n\n    for (const property of response.result) {\n      if (!property.enumerable) continue;\n      result.set(property.name, createJSHandle(this._context, property.value));\n    }\n\n    return result;\n  }\n  /**\n   * Returns a JSON representation of the object.\n   *\n   * @remarks\n   *\n   * The JSON is generated by running {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify | JSON.stringify}\n   * on the object in page and consequent {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse | JSON.parse} in puppeteer.\n   * **NOTE** The method throws if the referenced object is not stringifiable.\n   */\n\n\n  async jsonValue() {\n    if (this._remoteObject.objectId) {\n      const response = await this._client.send('Runtime.callFunctionOn', {\n        functionDeclaration: 'function() { return this; }',\n        objectId: this._remoteObject.objectId,\n        returnByValue: true,\n        awaitPromise: true\n      });\n      return helper_js_1.helper.valueFromRemoteObject(response.result);\n    }\n\n    return helper_js_1.helper.valueFromRemoteObject(this._remoteObject);\n  }\n  /**\n   * Returns either `null` or the object handle itself, if the object handle is\n   * an instance of {@link ElementHandle}.\n   */\n\n\n  asElement() {\n    // This always returns null, but subclasses can override this and return an\n    // ElementHandle.\n    return null;\n  }\n  /**\n   * Stops referencing the element handle, and resolves when the object handle is\n   * successfully disposed of.\n   */\n\n\n  async dispose() {\n    if (this._disposed) return;\n    this._disposed = true;\n    await helper_js_1.helper.releaseObject(this._client, this._remoteObject);\n  }\n  /**\n   * Returns a string representation of the JSHandle.\n   *\n   * @remarks Useful during debugging.\n   */\n\n\n  toString() {\n    if (this._remoteObject.objectId) {\n      const type = this._remoteObject.subtype || this._remoteObject.type;\n      return 'JSHandle@' + type;\n    }\n\n    return 'JSHandle:' + helper_js_1.helper.valueFromRemoteObject(this._remoteObject);\n  }\n\n}\n\nexports.JSHandle = JSHandle;\n/**\n * ElementHandle represents an in-page DOM element.\n *\n * @remarks\n *\n * ElementHandles can be created with the {@link Page.$} method.\n *\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *  const browser = await puppeteer.launch();\n *  const page = await browser.newPage();\n *  await page.goto('https://example.com');\n *  const hrefElement = await page.$('a');\n *  await hrefElement.click();\n *  // ...\n * })();\n * ```\n *\n * ElementHandle prevents the DOM element from being garbage-collected unless the\n * handle is {@link JSHandle.dispose | disposed}. ElementHandles are auto-disposed\n * when their origin frame gets navigated.\n *\n * ElementHandle instances can be used as arguments in {@link Page.$eval} and\n * {@link Page.evaluate} methods.\n *\n * If you're using TypeScript, ElementHandle takes a generic argument that\n * denotes the type of element the handle is holding within. For example, if you\n * have a handle to a `<select>` element, you can type it as\n * `ElementHandle<HTMLSelectElement>` and you get some nicer type checks.\n *\n * @public\n */\n\nclass ElementHandle extends JSHandle {\n  /**\n   * @internal\n   */\n  constructor(context, client, remoteObject, page, frameManager) {\n    super(context, client, remoteObject);\n    this._client = client;\n    this._remoteObject = remoteObject;\n    this._page = page;\n    this._frameManager = frameManager;\n  }\n\n  asElement() {\n    return this;\n  }\n  /**\n   * Resolves to the content frame for element handles referencing\n   * iframe nodes, or null otherwise\n   */\n\n\n  async contentFrame() {\n    const nodeInfo = await this._client.send('DOM.describeNode', {\n      objectId: this._remoteObject.objectId\n    });\n    if (typeof nodeInfo.node.frameId !== 'string') return null;\n    return this._frameManager.frame(nodeInfo.node.frameId);\n  }\n\n  async _scrollIntoViewIfNeeded() {\n    const error = await this.evaluate(async (element, pageJavascriptEnabled) => {\n      if (!element.isConnected) return 'Node is detached from document';\n      if (element.nodeType !== Node.ELEMENT_NODE) return 'Node is not of type HTMLElement'; // force-scroll if page's javascript is disabled.\n\n      if (!pageJavascriptEnabled) {\n        element.scrollIntoView({\n          block: 'center',\n          inline: 'center',\n          // Chrome still supports behavior: instant but it's not in the spec\n          // so TS shouts We don't want to make this breaking change in\n          // Puppeteer yet so we'll ignore the line.\n          // @ts-ignore\n          behavior: 'instant'\n        });\n        return false;\n      }\n\n      const visibleRatio = await new Promise(resolve => {\n        const observer = new IntersectionObserver(entries => {\n          resolve(entries[0].intersectionRatio);\n          observer.disconnect();\n        });\n        observer.observe(element);\n      });\n\n      if (visibleRatio !== 1.0) {\n        element.scrollIntoView({\n          block: 'center',\n          inline: 'center',\n          // Chrome still supports behavior: instant but it's not in the spec\n          // so TS shouts We don't want to make this breaking change in\n          // Puppeteer yet so we'll ignore the line.\n          // @ts-ignore\n          behavior: 'instant'\n        });\n      }\n\n      return false;\n    }, this._page.isJavaScriptEnabled());\n    if (error) throw new Error(error);\n  }\n\n  async _clickablePoint() {\n    const [result, layoutMetrics] = await Promise.all([this._client.send('DOM.getContentQuads', {\n      objectId: this._remoteObject.objectId\n    }).catch(helper_js_1.debugError), this._client.send('Page.getLayoutMetrics')]);\n    if (!result || !result.quads.length) throw new Error('Node is either not visible or not an HTMLElement'); // Filter out quads that have too small area to click into.\n\n    const {\n      clientWidth,\n      clientHeight\n    } = layoutMetrics.layoutViewport;\n    const quads = result.quads.map(quad => this._fromProtocolQuad(quad)).map(quad => this._intersectQuadWithViewport(quad, clientWidth, clientHeight)).filter(quad => computeQuadArea(quad) > 1);\n    if (!quads.length) throw new Error('Node is either not visible or not an HTMLElement'); // Return the middle point of the first quad.\n\n    const quad = quads[0];\n    let x = 0;\n    let y = 0;\n\n    for (const point of quad) {\n      x += point.x;\n      y += point.y;\n    }\n\n    return {\n      x: x / 4,\n      y: y / 4\n    };\n  }\n\n  _getBoxModel() {\n    const params = {\n      objectId: this._remoteObject.objectId\n    };\n    return this._client.send('DOM.getBoxModel', params).catch(error => helper_js_1.debugError(error));\n  }\n\n  _fromProtocolQuad(quad) {\n    return [{\n      x: quad[0],\n      y: quad[1]\n    }, {\n      x: quad[2],\n      y: quad[3]\n    }, {\n      x: quad[4],\n      y: quad[5]\n    }, {\n      x: quad[6],\n      y: quad[7]\n    }];\n  }\n\n  _intersectQuadWithViewport(quad, width, height) {\n    return quad.map(point => ({\n      x: Math.min(Math.max(point.x, 0), width),\n      y: Math.min(Math.max(point.y, 0), height)\n    }));\n  }\n  /**\n   * This method scrolls element into view if needed, and then\n   * uses {@link Page.mouse} to hover over the center of the element.\n   * If the element is detached from DOM, the method throws an error.\n   */\n\n\n  async hover() {\n    await this._scrollIntoViewIfNeeded();\n    const {\n      x,\n      y\n    } = await this._clickablePoint();\n    await this._page.mouse.move(x, y);\n  }\n  /**\n   * This method scrolls element into view if needed, and then\n   * uses {@link Page.mouse} to click in the center of the element.\n   * If the element is detached from DOM, the method throws an error.\n   */\n\n\n  async click(options = {}) {\n    await this._scrollIntoViewIfNeeded();\n    const {\n      x,\n      y\n    } = await this._clickablePoint();\n    await this._page.mouse.click(x, y, options);\n  }\n  /**\n   * Triggers a `change` and `input` event once all the provided options have been\n   * selected. If there's no `<select>` element matching `selector`, the method\n   * throws an error.\n   *\n   * @example\n   * ```js\n   * handle.select('blue'); // single selection\n   * handle.select('red', 'green', 'blue'); // multiple selections\n   * ```\n   * @param values - Values of options to select. If the `<select>` has the\n   *    `multiple` attribute, all values are considered, otherwise only the first\n   *    one is taken into account.\n   */\n\n\n  async select(...values) {\n    for (const value of values) assert_js_1.assert(helper_js_1.helper.isString(value), 'Values must be strings. Found value \"' + value + '\" of type \"' + typeof value + '\"');\n\n    return this.evaluate((element, values) => {\n      if (element.nodeName.toLowerCase() !== 'select') throw new Error('Element is not a <select> element.');\n      const options = Array.from(element.options);\n      element.value = undefined;\n\n      for (const option of options) {\n        option.selected = values.includes(option.value);\n        if (option.selected && !element.multiple) break;\n      }\n\n      element.dispatchEvent(new Event('input', {\n        bubbles: true\n      }));\n      element.dispatchEvent(new Event('change', {\n        bubbles: true\n      }));\n      return options.filter(option => option.selected).map(option => option.value);\n    }, values);\n  }\n  /**\n   * This method expects `elementHandle` to point to an\n   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input | input element}.\n   * @param filePaths - Sets the value of the file input to these paths.\n   *    If some of the  `filePaths` are relative paths, then they are resolved\n   *    relative to the {@link https://nodejs.org/api/process.html#process_process_cwd | current working directory}\n   */\n\n\n  async uploadFile(...filePaths) {\n    const isMultiple = await this.evaluate(element => element.multiple);\n    assert_js_1.assert(filePaths.length <= 1 || isMultiple, 'Multiple file uploads only work with <input type=file multiple>'); // This import is only needed for `uploadFile`, so keep it scoped here to avoid paying\n    // the cost unnecessarily.\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n    const path = require('path'); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\n    const fs = require('fs'); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\n    const {\n      promisify\n    } = require('util');\n\n    const access = promisify(fs.access); // Locate all files and confirm that they exist.\n\n    const files = await Promise.all(filePaths.map(async filePath => {\n      const resolvedPath = path.resolve(filePath);\n\n      try {\n        await access(resolvedPath, fs.constants.R_OK);\n      } catch (error) {\n        if (error.code === 'ENOENT') throw new Error(`${filePath} does not exist or is not readable`);\n      }\n\n      return resolvedPath;\n    }));\n    const {\n      objectId\n    } = this._remoteObject;\n    const {\n      node\n    } = await this._client.send('DOM.describeNode', {\n      objectId\n    });\n    const {\n      backendNodeId\n    } = node; // The zero-length array is a special case, it seems that DOM.setFileInputFiles does\n    // not actually update the files in that case, so the solution is to eval the element\n    // value to a new FileList directly.\n\n    if (files.length === 0) {\n      await this.evaluate(element => {\n        element.files = new DataTransfer().files; // Dispatch events for this case because it should behave akin to a user action.\n\n        element.dispatchEvent(new Event('input', {\n          bubbles: true\n        }));\n        element.dispatchEvent(new Event('change', {\n          bubbles: true\n        }));\n      });\n    } else {\n      await this._client.send('DOM.setFileInputFiles', {\n        objectId,\n        files,\n        backendNodeId\n      });\n    }\n  }\n  /**\n   * This method scrolls element into view if needed, and then uses\n   * {@link Touchscreen.tap} to tap in the center of the element.\n   * If the element is detached from DOM, the method throws an error.\n   */\n\n\n  async tap() {\n    await this._scrollIntoViewIfNeeded();\n    const {\n      x,\n      y\n    } = await this._clickablePoint();\n    await this._page.touchscreen.tap(x, y);\n  }\n  /**\n   * Calls {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus | focus} on the element.\n   */\n\n\n  async focus() {\n    await this.evaluate(element => element.focus());\n  }\n  /**\n   * Focuses the element, and then sends a `keydown`, `keypress`/`input`, and\n   * `keyup` event for each character in the text.\n   *\n   * To press a special key, like `Control` or `ArrowDown`,\n   * use {@link ElementHandle.press}.\n   *\n   * @example\n   * ```js\n   * await elementHandle.type('Hello'); // Types instantly\n   * await elementHandle.type('World', {delay: 100}); // Types slower, like a user\n   * ```\n   *\n   * @example\n   * An example of typing into a text field and then submitting the form:\n   *\n   * ```js\n   * const elementHandle = await page.$('input');\n   * await elementHandle.type('some text');\n   * await elementHandle.press('Enter');\n   * ```\n   */\n\n\n  async type(text, options) {\n    await this.focus();\n    await this._page.keyboard.type(text, options);\n  }\n  /**\n   * Focuses the element, and then uses {@link Keyboard.down} and {@link Keyboard.up}.\n   *\n   * @remarks\n   * If `key` is a single character and no modifier keys besides `Shift`\n   * are being held down, a `keypress`/`input` event will also be generated.\n   * The `text` option can be specified to force an input event to be generated.\n   *\n   * **NOTE** Modifier keys DO affect `elementHandle.press`. Holding down `Shift`\n   * will type the text in upper case.\n   *\n   * @param key - Name of key to press, such as `ArrowLeft`.\n   *    See {@link KeyInput} for a list of all key names.\n   */\n\n\n  async press(key, options) {\n    await this.focus();\n    await this._page.keyboard.press(key, options);\n  }\n  /**\n   * This method returns the bounding box of the element (relative to the main frame),\n   * or `null` if the element is not visible.\n   */\n\n\n  async boundingBox() {\n    const result = await this._getBoxModel();\n    if (!result) return null;\n    const quad = result.model.border;\n    const x = Math.min(quad[0], quad[2], quad[4], quad[6]);\n    const y = Math.min(quad[1], quad[3], quad[5], quad[7]);\n    const width = Math.max(quad[0], quad[2], quad[4], quad[6]) - x;\n    const height = Math.max(quad[1], quad[3], quad[5], quad[7]) - y;\n    return {\n      x,\n      y,\n      width,\n      height\n    };\n  }\n  /**\n   * This method returns boxes of the element, or `null` if the element is not visible.\n   *\n   * @remarks\n   *\n   * Boxes are represented as an array of points;\n   * Each Point is an object `{x, y}`. Box points are sorted clock-wise.\n   */\n\n\n  async boxModel() {\n    const result = await this._getBoxModel();\n    if (!result) return null;\n    const {\n      content,\n      padding,\n      border,\n      margin,\n      width,\n      height\n    } = result.model;\n    return {\n      content: this._fromProtocolQuad(content),\n      padding: this._fromProtocolQuad(padding),\n      border: this._fromProtocolQuad(border),\n      margin: this._fromProtocolQuad(margin),\n      width,\n      height\n    };\n  }\n  /**\n   * This method scrolls element into view if needed, and then uses\n   * {@link Page.screenshot} to take a screenshot of the element.\n   * If the element is detached from DOM, the method throws an error.\n   */\n\n\n  async screenshot(options = {}) {\n    let needsViewportReset = false;\n    let boundingBox = await this.boundingBox();\n    assert_js_1.assert(boundingBox, 'Node is either not visible or not an HTMLElement');\n\n    const viewport = this._page.viewport();\n\n    if (viewport && (boundingBox.width > viewport.width || boundingBox.height > viewport.height)) {\n      const newViewport = {\n        width: Math.max(viewport.width, Math.ceil(boundingBox.width)),\n        height: Math.max(viewport.height, Math.ceil(boundingBox.height))\n      };\n      await this._page.setViewport(Object.assign({}, viewport, newViewport));\n      needsViewportReset = true;\n    }\n\n    await this._scrollIntoViewIfNeeded();\n    boundingBox = await this.boundingBox();\n    assert_js_1.assert(boundingBox, 'Node is either not visible or not an HTMLElement');\n    assert_js_1.assert(boundingBox.width !== 0, 'Node has 0 width.');\n    assert_js_1.assert(boundingBox.height !== 0, 'Node has 0 height.');\n    const {\n      layoutViewport: {\n        pageX,\n        pageY\n      }\n    } = await this._client.send('Page.getLayoutMetrics');\n    const clip = Object.assign({}, boundingBox);\n    clip.x += pageX;\n    clip.y += pageY;\n    const imageData = await this._page.screenshot(Object.assign({}, {\n      clip\n    }, options));\n    if (needsViewportReset) await this._page.setViewport(viewport);\n    return imageData;\n  }\n  /**\n   * Runs `element.querySelector` within the page. If no element matches the selector,\n   * the return value resolves to `null`.\n   */\n\n\n  async $(selector) {\n    const {\n      updatedSelector,\n      queryHandler\n    } = QueryHandler_js_1.getQueryHandlerAndSelector(selector);\n    const handle = await this.evaluateHandle(queryHandler.queryOne, updatedSelector);\n    const element = handle.asElement();\n    if (element) return element;\n    await handle.dispose();\n    return null;\n  }\n  /**\n   * Runs `element.querySelectorAll` within the page. If no elements match the selector,\n   * the return value resolves to `[]`.\n   */\n\n\n  async $$(selector) {\n    const {\n      updatedSelector,\n      queryHandler\n    } = QueryHandler_js_1.getQueryHandlerAndSelector(selector);\n    const handles = await this.evaluateHandle(queryHandler.queryAll, updatedSelector);\n    const properties = await handles.getProperties();\n    await handles.dispose();\n    const result = [];\n\n    for (const property of properties.values()) {\n      const elementHandle = property.asElement();\n      if (elementHandle) result.push(elementHandle);\n    }\n\n    return result;\n  }\n  /**\n   * This method runs `document.querySelector` within the element and passes it as\n   * the first argument to `pageFunction`. If there's no element matching `selector`,\n   * the method throws an error.\n   *\n   * If `pageFunction` returns a Promise, then `frame.$eval` would wait for the promise\n   * to resolve and return its value.\n   *\n   * @example\n   * ```js\n   * const tweetHandle = await page.$('.tweet');\n   * expect(await tweetHandle.$eval('.like', node => node.innerText)).toBe('100');\n   * expect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe('10');\n   * ```\n   */\n\n\n  async $eval(selector, pageFunction, ...args) {\n    const elementHandle = await this.$(selector);\n    if (!elementHandle) throw new Error(`Error: failed to find element matching selector \"${selector}\"`);\n    const result = await elementHandle.evaluate(pageFunction, ...args);\n    await elementHandle.dispose();\n    /**\n     * This `as` is a little unfortunate but helps TS understand the behavior of\n     * `elementHandle.evaluate`. If evaluate returns an element it will return an\n     * ElementHandle instance, rather than the plain object. All the\n     * WrapElementHandle type does is wrap ReturnType into\n     * ElementHandle<ReturnType> if it is an ElementHandle, or leave it alone as\n     * ReturnType if it isn't.\n     */\n\n    return result;\n  }\n  /**\n   * This method runs `document.querySelectorAll` within the element and passes it as\n   * the first argument to `pageFunction`. If there's no element matching `selector`,\n   * the method throws an error.\n   *\n   * If `pageFunction` returns a Promise, then `frame.$$eval` would wait for the\n   * promise to resolve and return its value.\n   *\n   * @example\n   * ```html\n   * <div class=\"feed\">\n   *   <div class=\"tweet\">Hello!</div>\n   *   <div class=\"tweet\">Hi!</div>\n   * </div>\n   * ```\n   *\n   * @example\n   * ```js\n   * const feedHandle = await page.$('.feed');\n   * expect(await feedHandle.$$eval('.tweet', nodes => nodes.map(n => n.innerText)))\n   *  .toEqual(['Hello!', 'Hi!']);\n   * ```\n   */\n\n\n  async $$eval(selector, pageFunction, ...args) {\n    const {\n      updatedSelector,\n      queryHandler\n    } = QueryHandler_js_1.getQueryHandlerAndSelector(selector);\n    const queryHandlerToArray = Function('element', 'selector', `return Array.from((${queryHandler.queryAll})(element, selector));`);\n    const arrayHandle = await this.evaluateHandle(queryHandlerToArray, updatedSelector);\n    const result = await arrayHandle.evaluate(pageFunction, ...args);\n    await arrayHandle.dispose();\n    /* This `as` exists for the same reason as the `as` in $eval above.\n     * See the comment there for a full explanation.\n     */\n\n    return result;\n  }\n  /**\n   * The method evaluates the XPath expression relative to the elementHandle.\n   * If there are no such elements, the method will resolve to an empty array.\n   * @param expression - Expression to {@link https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate | evaluate}\n   */\n\n\n  async $x(expression) {\n    const arrayHandle = await this.evaluateHandle((element, expression) => {\n      const document = element.ownerDocument || element;\n      const iterator = document.evaluate(expression, element, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);\n      const array = [];\n      let item;\n\n      while (item = iterator.iterateNext()) array.push(item);\n\n      return array;\n    }, expression);\n    const properties = await arrayHandle.getProperties();\n    await arrayHandle.dispose();\n    const result = [];\n\n    for (const property of properties.values()) {\n      const elementHandle = property.asElement();\n      if (elementHandle) result.push(elementHandle);\n    }\n\n    return result;\n  }\n  /**\n   * Resolves to true if the element is visible in the current viewport.\n   */\n\n\n  async isIntersectingViewport() {\n    return await this.evaluate(async element => {\n      const visibleRatio = await new Promise(resolve => {\n        const observer = new IntersectionObserver(entries => {\n          resolve(entries[0].intersectionRatio);\n          observer.disconnect();\n        });\n        observer.observe(element);\n      });\n      return visibleRatio > 0;\n    });\n  }\n\n}\n\nexports.ElementHandle = ElementHandle;\n\nfunction computeQuadArea(quad) {\n  // Compute sum of all directed areas of adjacent triangles\n  // https://en.wikipedia.org/wiki/Polygon#Simple_polygons\n  let area = 0;\n\n  for (let i = 0; i < quad.length; ++i) {\n    const p1 = quad[i];\n    const p2 = quad[(i + 1) % quad.length];\n    area += (p1.x * p2.y - p2.x * p1.y) / 2;\n  }\n\n  return Math.abs(area);\n}","map":{"version":3,"sources":["C:/Users/Sajjad Brohi/JavaScript Projects/RESTful API/packages/client/node_modules/puppeteer/lib/cjs/puppeteer/common/JSHandle.js"],"names":["Object","defineProperty","exports","value","ElementHandle","JSHandle","createJSHandle","assert_js_1","require","helper_js_1","QueryHandler_js_1","context","remoteObject","frame","subtype","frameManager","_frameManager","_client","page","constructor","client","_disposed","_context","_remoteObject","executionContext","evaluate","pageFunction","args","evaluateHandle","getProperty","propertyName","objectHandle","object","result","__proto__","properties","getProperties","get","dispose","response","send","objectId","ownProperties","Map","property","enumerable","set","name","jsonValue","functionDeclaration","returnByValue","awaitPromise","helper","valueFromRemoteObject","asElement","releaseObject","toString","type","_page","contentFrame","nodeInfo","node","frameId","_scrollIntoViewIfNeeded","error","element","pageJavascriptEnabled","isConnected","nodeType","Node","ELEMENT_NODE","scrollIntoView","block","inline","behavior","visibleRatio","Promise","resolve","observer","IntersectionObserver","entries","intersectionRatio","disconnect","observe","isJavaScriptEnabled","Error","_clickablePoint","layoutMetrics","all","catch","debugError","quads","length","clientWidth","clientHeight","layoutViewport","map","quad","_fromProtocolQuad","_intersectQuadWithViewport","filter","computeQuadArea","x","y","point","_getBoxModel","params","width","height","Math","min","max","hover","mouse","move","click","options","select","values","assert","isString","nodeName","toLowerCase","Array","from","undefined","option","selected","includes","multiple","dispatchEvent","Event","bubbles","uploadFile","filePaths","isMultiple","path","fs","promisify","access","files","filePath","resolvedPath","constants","R_OK","code","backendNodeId","DataTransfer","tap","touchscreen","focus","text","keyboard","press","key","boundingBox","model","border","boxModel","content","padding","margin","screenshot","needsViewportReset","viewport","newViewport","ceil","setViewport","assign","pageX","pageY","clip","imageData","$","selector","updatedSelector","queryHandler","getQueryHandlerAndSelector","handle","queryOne","$$","handles","queryAll","elementHandle","push","$eval","$$eval","queryHandlerToArray","Function","arrayHandle","$x","expression","document","ownerDocument","iterator","XPathResult","ORDERED_NODE_ITERATOR_TYPE","array","item","iterateNext","isIntersectingViewport","area","i","p1","p2","abs"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ElementHandle = exports.JSHandle = exports.createJSHandle = void 0;\nconst assert_js_1 = require(\"./assert.js\");\nconst helper_js_1 = require(\"./helper.js\");\nconst QueryHandler_js_1 = require(\"./QueryHandler.js\");\n/**\n * @internal\n */\nfunction createJSHandle(context, remoteObject) {\n    const frame = context.frame();\n    if (remoteObject.subtype === 'node' && frame) {\n        const frameManager = frame._frameManager;\n        return new ElementHandle(context, context._client, remoteObject, frameManager.page(), frameManager);\n    }\n    return new JSHandle(context, context._client, remoteObject);\n}\nexports.createJSHandle = createJSHandle;\n/**\n * Represents an in-page JavaScript object. JSHandles can be created with the\n * {@link Page.evaluateHandle | page.evaluateHandle} method.\n *\n * @example\n * ```js\n * const windowHandle = await page.evaluateHandle(() => window);\n * ```\n *\n * JSHandle prevents the referenced JavaScript object from being garbage-collected\n * unless the handle is {@link JSHandle.dispose | disposed}. JSHandles are auto-\n * disposed when their origin frame gets navigated or the parent context gets destroyed.\n *\n * JSHandle instances can be used as arguments for {@link Page.$eval},\n * {@link Page.evaluate}, and {@link Page.evaluateHandle}.\n *\n * @public\n */\nclass JSHandle {\n    /**\n     * @internal\n     */\n    constructor(context, client, remoteObject) {\n        /**\n         * @internal\n         */\n        this._disposed = false;\n        this._context = context;\n        this._client = client;\n        this._remoteObject = remoteObject;\n    }\n    /** Returns the execution context the handle belongs to.\n     */\n    executionContext() {\n        return this._context;\n    }\n    /**\n     * This method passes this handle as the first argument to `pageFunction`.\n     * If `pageFunction` returns a Promise, then `handle.evaluate` would wait\n     * for the promise to resolve and return its value.\n     *\n     * @example\n     * ```js\n     * const tweetHandle = await page.$('.tweet .retweets');\n     * expect(await tweetHandle.evaluate(node => node.innerText)).toBe('10');\n     * ```\n     */\n    async evaluate(pageFunction, ...args) {\n        return await this.executionContext().evaluate(pageFunction, this, ...args);\n    }\n    /**\n     * This method passes this handle as the first argument to `pageFunction`.\n     *\n     * @remarks\n     *\n     * The only difference between `jsHandle.evaluate` and\n     * `jsHandle.evaluateHandle` is that `jsHandle.evaluateHandle`\n     * returns an in-page object (JSHandle).\n     *\n     * If the function passed to `jsHandle.evaluateHandle` returns a Promise,\n     * then `evaluateHandle.evaluateHandle` waits for the promise to resolve and\n     * returns its value.\n     *\n     * See {@link Page.evaluateHandle} for more details.\n     */\n    async evaluateHandle(pageFunction, ...args) {\n        return await this.executionContext().evaluateHandle(pageFunction, this, ...args);\n    }\n    /** Fetches a single property from the referenced object.\n     */\n    async getProperty(propertyName) {\n        const objectHandle = await this.evaluateHandle((object, propertyName) => {\n            const result = { __proto__: null };\n            result[propertyName] = object[propertyName];\n            return result;\n        }, propertyName);\n        const properties = await objectHandle.getProperties();\n        const result = properties.get(propertyName) || null;\n        await objectHandle.dispose();\n        return result;\n    }\n    /**\n     * The method returns a map with property names as keys and JSHandle\n     * instances for the property values.\n     *\n     * @example\n     * ```js\n     * const listHandle = await page.evaluateHandle(() => document.body.children);\n     * const properties = await listHandle.getProperties();\n     * const children = [];\n     * for (const property of properties.values()) {\n     *   const element = property.asElement();\n     *   if (element)\n     *     children.push(element);\n     * }\n     * children; // holds elementHandles to all children of document.body\n     * ```\n     */\n    async getProperties() {\n        const response = await this._client.send('Runtime.getProperties', {\n            objectId: this._remoteObject.objectId,\n            ownProperties: true,\n        });\n        const result = new Map();\n        for (const property of response.result) {\n            if (!property.enumerable)\n                continue;\n            result.set(property.name, createJSHandle(this._context, property.value));\n        }\n        return result;\n    }\n    /**\n     * Returns a JSON representation of the object.\n     *\n     * @remarks\n     *\n     * The JSON is generated by running {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify | JSON.stringify}\n     * on the object in page and consequent {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse | JSON.parse} in puppeteer.\n     * **NOTE** The method throws if the referenced object is not stringifiable.\n     */\n    async jsonValue() {\n        if (this._remoteObject.objectId) {\n            const response = await this._client.send('Runtime.callFunctionOn', {\n                functionDeclaration: 'function() { return this; }',\n                objectId: this._remoteObject.objectId,\n                returnByValue: true,\n                awaitPromise: true,\n            });\n            return helper_js_1.helper.valueFromRemoteObject(response.result);\n        }\n        return helper_js_1.helper.valueFromRemoteObject(this._remoteObject);\n    }\n    /**\n     * Returns either `null` or the object handle itself, if the object handle is\n     * an instance of {@link ElementHandle}.\n     */\n    asElement() {\n        // This always returns null, but subclasses can override this and return an\n        // ElementHandle.\n        return null;\n    }\n    /**\n     * Stops referencing the element handle, and resolves when the object handle is\n     * successfully disposed of.\n     */\n    async dispose() {\n        if (this._disposed)\n            return;\n        this._disposed = true;\n        await helper_js_1.helper.releaseObject(this._client, this._remoteObject);\n    }\n    /**\n     * Returns a string representation of the JSHandle.\n     *\n     * @remarks Useful during debugging.\n     */\n    toString() {\n        if (this._remoteObject.objectId) {\n            const type = this._remoteObject.subtype || this._remoteObject.type;\n            return 'JSHandle@' + type;\n        }\n        return 'JSHandle:' + helper_js_1.helper.valueFromRemoteObject(this._remoteObject);\n    }\n}\nexports.JSHandle = JSHandle;\n/**\n * ElementHandle represents an in-page DOM element.\n *\n * @remarks\n *\n * ElementHandles can be created with the {@link Page.$} method.\n *\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *  const browser = await puppeteer.launch();\n *  const page = await browser.newPage();\n *  await page.goto('https://example.com');\n *  const hrefElement = await page.$('a');\n *  await hrefElement.click();\n *  // ...\n * })();\n * ```\n *\n * ElementHandle prevents the DOM element from being garbage-collected unless the\n * handle is {@link JSHandle.dispose | disposed}. ElementHandles are auto-disposed\n * when their origin frame gets navigated.\n *\n * ElementHandle instances can be used as arguments in {@link Page.$eval} and\n * {@link Page.evaluate} methods.\n *\n * If you're using TypeScript, ElementHandle takes a generic argument that\n * denotes the type of element the handle is holding within. For example, if you\n * have a handle to a `<select>` element, you can type it as\n * `ElementHandle<HTMLSelectElement>` and you get some nicer type checks.\n *\n * @public\n */\nclass ElementHandle extends JSHandle {\n    /**\n     * @internal\n     */\n    constructor(context, client, remoteObject, page, frameManager) {\n        super(context, client, remoteObject);\n        this._client = client;\n        this._remoteObject = remoteObject;\n        this._page = page;\n        this._frameManager = frameManager;\n    }\n    asElement() {\n        return this;\n    }\n    /**\n     * Resolves to the content frame for element handles referencing\n     * iframe nodes, or null otherwise\n     */\n    async contentFrame() {\n        const nodeInfo = await this._client.send('DOM.describeNode', {\n            objectId: this._remoteObject.objectId,\n        });\n        if (typeof nodeInfo.node.frameId !== 'string')\n            return null;\n        return this._frameManager.frame(nodeInfo.node.frameId);\n    }\n    async _scrollIntoViewIfNeeded() {\n        const error = await this.evaluate(async (element, pageJavascriptEnabled) => {\n            if (!element.isConnected)\n                return 'Node is detached from document';\n            if (element.nodeType !== Node.ELEMENT_NODE)\n                return 'Node is not of type HTMLElement';\n            // force-scroll if page's javascript is disabled.\n            if (!pageJavascriptEnabled) {\n                element.scrollIntoView({\n                    block: 'center',\n                    inline: 'center',\n                    // Chrome still supports behavior: instant but it's not in the spec\n                    // so TS shouts We don't want to make this breaking change in\n                    // Puppeteer yet so we'll ignore the line.\n                    // @ts-ignore\n                    behavior: 'instant',\n                });\n                return false;\n            }\n            const visibleRatio = await new Promise((resolve) => {\n                const observer = new IntersectionObserver((entries) => {\n                    resolve(entries[0].intersectionRatio);\n                    observer.disconnect();\n                });\n                observer.observe(element);\n            });\n            if (visibleRatio !== 1.0) {\n                element.scrollIntoView({\n                    block: 'center',\n                    inline: 'center',\n                    // Chrome still supports behavior: instant but it's not in the spec\n                    // so TS shouts We don't want to make this breaking change in\n                    // Puppeteer yet so we'll ignore the line.\n                    // @ts-ignore\n                    behavior: 'instant',\n                });\n            }\n            return false;\n        }, this._page.isJavaScriptEnabled());\n        if (error)\n            throw new Error(error);\n    }\n    async _clickablePoint() {\n        const [result, layoutMetrics] = await Promise.all([\n            this._client\n                .send('DOM.getContentQuads', {\n                objectId: this._remoteObject.objectId,\n            })\n                .catch(helper_js_1.debugError),\n            this._client.send('Page.getLayoutMetrics'),\n        ]);\n        if (!result || !result.quads.length)\n            throw new Error('Node is either not visible or not an HTMLElement');\n        // Filter out quads that have too small area to click into.\n        const { clientWidth, clientHeight } = layoutMetrics.layoutViewport;\n        const quads = result.quads\n            .map((quad) => this._fromProtocolQuad(quad))\n            .map((quad) => this._intersectQuadWithViewport(quad, clientWidth, clientHeight))\n            .filter((quad) => computeQuadArea(quad) > 1);\n        if (!quads.length)\n            throw new Error('Node is either not visible or not an HTMLElement');\n        // Return the middle point of the first quad.\n        const quad = quads[0];\n        let x = 0;\n        let y = 0;\n        for (const point of quad) {\n            x += point.x;\n            y += point.y;\n        }\n        return {\n            x: x / 4,\n            y: y / 4,\n        };\n    }\n    _getBoxModel() {\n        const params = {\n            objectId: this._remoteObject.objectId,\n        };\n        return this._client\n            .send('DOM.getBoxModel', params)\n            .catch((error) => helper_js_1.debugError(error));\n    }\n    _fromProtocolQuad(quad) {\n        return [\n            { x: quad[0], y: quad[1] },\n            { x: quad[2], y: quad[3] },\n            { x: quad[4], y: quad[5] },\n            { x: quad[6], y: quad[7] },\n        ];\n    }\n    _intersectQuadWithViewport(quad, width, height) {\n        return quad.map((point) => ({\n            x: Math.min(Math.max(point.x, 0), width),\n            y: Math.min(Math.max(point.y, 0), height),\n        }));\n    }\n    /**\n     * This method scrolls element into view if needed, and then\n     * uses {@link Page.mouse} to hover over the center of the element.\n     * If the element is detached from DOM, the method throws an error.\n     */\n    async hover() {\n        await this._scrollIntoViewIfNeeded();\n        const { x, y } = await this._clickablePoint();\n        await this._page.mouse.move(x, y);\n    }\n    /**\n     * This method scrolls element into view if needed, and then\n     * uses {@link Page.mouse} to click in the center of the element.\n     * If the element is detached from DOM, the method throws an error.\n     */\n    async click(options = {}) {\n        await this._scrollIntoViewIfNeeded();\n        const { x, y } = await this._clickablePoint();\n        await this._page.mouse.click(x, y, options);\n    }\n    /**\n     * Triggers a `change` and `input` event once all the provided options have been\n     * selected. If there's no `<select>` element matching `selector`, the method\n     * throws an error.\n     *\n     * @example\n     * ```js\n     * handle.select('blue'); // single selection\n     * handle.select('red', 'green', 'blue'); // multiple selections\n     * ```\n     * @param values - Values of options to select. If the `<select>` has the\n     *    `multiple` attribute, all values are considered, otherwise only the first\n     *    one is taken into account.\n     */\n    async select(...values) {\n        for (const value of values)\n            assert_js_1.assert(helper_js_1.helper.isString(value), 'Values must be strings. Found value \"' +\n                value +\n                '\" of type \"' +\n                typeof value +\n                '\"');\n        return this.evaluate((element, values) => {\n            if (element.nodeName.toLowerCase() !== 'select')\n                throw new Error('Element is not a <select> element.');\n            const options = Array.from(element.options);\n            element.value = undefined;\n            for (const option of options) {\n                option.selected = values.includes(option.value);\n                if (option.selected && !element.multiple)\n                    break;\n            }\n            element.dispatchEvent(new Event('input', { bubbles: true }));\n            element.dispatchEvent(new Event('change', { bubbles: true }));\n            return options\n                .filter((option) => option.selected)\n                .map((option) => option.value);\n        }, values);\n    }\n    /**\n     * This method expects `elementHandle` to point to an\n     * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input | input element}.\n     * @param filePaths - Sets the value of the file input to these paths.\n     *    If some of the  `filePaths` are relative paths, then they are resolved\n     *    relative to the {@link https://nodejs.org/api/process.html#process_process_cwd | current working directory}\n     */\n    async uploadFile(...filePaths) {\n        const isMultiple = await this.evaluate((element) => element.multiple);\n        assert_js_1.assert(filePaths.length <= 1 || isMultiple, 'Multiple file uploads only work with <input type=file multiple>');\n        // This import is only needed for `uploadFile`, so keep it scoped here to avoid paying\n        // the cost unnecessarily.\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const path = require('path');\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const fs = require('fs');\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const { promisify } = require('util');\n        const access = promisify(fs.access);\n        // Locate all files and confirm that they exist.\n        const files = await Promise.all(filePaths.map(async (filePath) => {\n            const resolvedPath = path.resolve(filePath);\n            try {\n                await access(resolvedPath, fs.constants.R_OK);\n            }\n            catch (error) {\n                if (error.code === 'ENOENT')\n                    throw new Error(`${filePath} does not exist or is not readable`);\n            }\n            return resolvedPath;\n        }));\n        const { objectId } = this._remoteObject;\n        const { node } = await this._client.send('DOM.describeNode', { objectId });\n        const { backendNodeId } = node;\n        // The zero-length array is a special case, it seems that DOM.setFileInputFiles does\n        // not actually update the files in that case, so the solution is to eval the element\n        // value to a new FileList directly.\n        if (files.length === 0) {\n            await this.evaluate((element) => {\n                element.files = new DataTransfer().files;\n                // Dispatch events for this case because it should behave akin to a user action.\n                element.dispatchEvent(new Event('input', { bubbles: true }));\n                element.dispatchEvent(new Event('change', { bubbles: true }));\n            });\n        }\n        else {\n            await this._client.send('DOM.setFileInputFiles', {\n                objectId,\n                files,\n                backendNodeId,\n            });\n        }\n    }\n    /**\n     * This method scrolls element into view if needed, and then uses\n     * {@link Touchscreen.tap} to tap in the center of the element.\n     * If the element is detached from DOM, the method throws an error.\n     */\n    async tap() {\n        await this._scrollIntoViewIfNeeded();\n        const { x, y } = await this._clickablePoint();\n        await this._page.touchscreen.tap(x, y);\n    }\n    /**\n     * Calls {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus | focus} on the element.\n     */\n    async focus() {\n        await this.evaluate((element) => element.focus());\n    }\n    /**\n     * Focuses the element, and then sends a `keydown`, `keypress`/`input`, and\n     * `keyup` event for each character in the text.\n     *\n     * To press a special key, like `Control` or `ArrowDown`,\n     * use {@link ElementHandle.press}.\n     *\n     * @example\n     * ```js\n     * await elementHandle.type('Hello'); // Types instantly\n     * await elementHandle.type('World', {delay: 100}); // Types slower, like a user\n     * ```\n     *\n     * @example\n     * An example of typing into a text field and then submitting the form:\n     *\n     * ```js\n     * const elementHandle = await page.$('input');\n     * await elementHandle.type('some text');\n     * await elementHandle.press('Enter');\n     * ```\n     */\n    async type(text, options) {\n        await this.focus();\n        await this._page.keyboard.type(text, options);\n    }\n    /**\n     * Focuses the element, and then uses {@link Keyboard.down} and {@link Keyboard.up}.\n     *\n     * @remarks\n     * If `key` is a single character and no modifier keys besides `Shift`\n     * are being held down, a `keypress`/`input` event will also be generated.\n     * The `text` option can be specified to force an input event to be generated.\n     *\n     * **NOTE** Modifier keys DO affect `elementHandle.press`. Holding down `Shift`\n     * will type the text in upper case.\n     *\n     * @param key - Name of key to press, such as `ArrowLeft`.\n     *    See {@link KeyInput} for a list of all key names.\n     */\n    async press(key, options) {\n        await this.focus();\n        await this._page.keyboard.press(key, options);\n    }\n    /**\n     * This method returns the bounding box of the element (relative to the main frame),\n     * or `null` if the element is not visible.\n     */\n    async boundingBox() {\n        const result = await this._getBoxModel();\n        if (!result)\n            return null;\n        const quad = result.model.border;\n        const x = Math.min(quad[0], quad[2], quad[4], quad[6]);\n        const y = Math.min(quad[1], quad[3], quad[5], quad[7]);\n        const width = Math.max(quad[0], quad[2], quad[4], quad[6]) - x;\n        const height = Math.max(quad[1], quad[3], quad[5], quad[7]) - y;\n        return { x, y, width, height };\n    }\n    /**\n     * This method returns boxes of the element, or `null` if the element is not visible.\n     *\n     * @remarks\n     *\n     * Boxes are represented as an array of points;\n     * Each Point is an object `{x, y}`. Box points are sorted clock-wise.\n     */\n    async boxModel() {\n        const result = await this._getBoxModel();\n        if (!result)\n            return null;\n        const { content, padding, border, margin, width, height } = result.model;\n        return {\n            content: this._fromProtocolQuad(content),\n            padding: this._fromProtocolQuad(padding),\n            border: this._fromProtocolQuad(border),\n            margin: this._fromProtocolQuad(margin),\n            width,\n            height,\n        };\n    }\n    /**\n     * This method scrolls element into view if needed, and then uses\n     * {@link Page.screenshot} to take a screenshot of the element.\n     * If the element is detached from DOM, the method throws an error.\n     */\n    async screenshot(options = {}) {\n        let needsViewportReset = false;\n        let boundingBox = await this.boundingBox();\n        assert_js_1.assert(boundingBox, 'Node is either not visible or not an HTMLElement');\n        const viewport = this._page.viewport();\n        if (viewport &&\n            (boundingBox.width > viewport.width ||\n                boundingBox.height > viewport.height)) {\n            const newViewport = {\n                width: Math.max(viewport.width, Math.ceil(boundingBox.width)),\n                height: Math.max(viewport.height, Math.ceil(boundingBox.height)),\n            };\n            await this._page.setViewport(Object.assign({}, viewport, newViewport));\n            needsViewportReset = true;\n        }\n        await this._scrollIntoViewIfNeeded();\n        boundingBox = await this.boundingBox();\n        assert_js_1.assert(boundingBox, 'Node is either not visible or not an HTMLElement');\n        assert_js_1.assert(boundingBox.width !== 0, 'Node has 0 width.');\n        assert_js_1.assert(boundingBox.height !== 0, 'Node has 0 height.');\n        const { layoutViewport: { pageX, pageY }, } = await this._client.send('Page.getLayoutMetrics');\n        const clip = Object.assign({}, boundingBox);\n        clip.x += pageX;\n        clip.y += pageY;\n        const imageData = await this._page.screenshot(Object.assign({}, {\n            clip,\n        }, options));\n        if (needsViewportReset)\n            await this._page.setViewport(viewport);\n        return imageData;\n    }\n    /**\n     * Runs `element.querySelector` within the page. If no element matches the selector,\n     * the return value resolves to `null`.\n     */\n    async $(selector) {\n        const { updatedSelector, queryHandler } = QueryHandler_js_1.getQueryHandlerAndSelector(selector);\n        const handle = await this.evaluateHandle(queryHandler.queryOne, updatedSelector);\n        const element = handle.asElement();\n        if (element)\n            return element;\n        await handle.dispose();\n        return null;\n    }\n    /**\n     * Runs `element.querySelectorAll` within the page. If no elements match the selector,\n     * the return value resolves to `[]`.\n     */\n    async $$(selector) {\n        const { updatedSelector, queryHandler } = QueryHandler_js_1.getQueryHandlerAndSelector(selector);\n        const handles = await this.evaluateHandle(queryHandler.queryAll, updatedSelector);\n        const properties = await handles.getProperties();\n        await handles.dispose();\n        const result = [];\n        for (const property of properties.values()) {\n            const elementHandle = property.asElement();\n            if (elementHandle)\n                result.push(elementHandle);\n        }\n        return result;\n    }\n    /**\n     * This method runs `document.querySelector` within the element and passes it as\n     * the first argument to `pageFunction`. If there's no element matching `selector`,\n     * the method throws an error.\n     *\n     * If `pageFunction` returns a Promise, then `frame.$eval` would wait for the promise\n     * to resolve and return its value.\n     *\n     * @example\n     * ```js\n     * const tweetHandle = await page.$('.tweet');\n     * expect(await tweetHandle.$eval('.like', node => node.innerText)).toBe('100');\n     * expect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe('10');\n     * ```\n     */\n    async $eval(selector, pageFunction, ...args) {\n        const elementHandle = await this.$(selector);\n        if (!elementHandle)\n            throw new Error(`Error: failed to find element matching selector \"${selector}\"`);\n        const result = await elementHandle.evaluate(pageFunction, ...args);\n        await elementHandle.dispose();\n        /**\n         * This `as` is a little unfortunate but helps TS understand the behavior of\n         * `elementHandle.evaluate`. If evaluate returns an element it will return an\n         * ElementHandle instance, rather than the plain object. All the\n         * WrapElementHandle type does is wrap ReturnType into\n         * ElementHandle<ReturnType> if it is an ElementHandle, or leave it alone as\n         * ReturnType if it isn't.\n         */\n        return result;\n    }\n    /**\n     * This method runs `document.querySelectorAll` within the element and passes it as\n     * the first argument to `pageFunction`. If there's no element matching `selector`,\n     * the method throws an error.\n     *\n     * If `pageFunction` returns a Promise, then `frame.$$eval` would wait for the\n     * promise to resolve and return its value.\n     *\n     * @example\n     * ```html\n     * <div class=\"feed\">\n     *   <div class=\"tweet\">Hello!</div>\n     *   <div class=\"tweet\">Hi!</div>\n     * </div>\n     * ```\n     *\n     * @example\n     * ```js\n     * const feedHandle = await page.$('.feed');\n     * expect(await feedHandle.$$eval('.tweet', nodes => nodes.map(n => n.innerText)))\n     *  .toEqual(['Hello!', 'Hi!']);\n     * ```\n     */\n    async $$eval(selector, pageFunction, ...args) {\n        const { updatedSelector, queryHandler } = QueryHandler_js_1.getQueryHandlerAndSelector(selector);\n        const queryHandlerToArray = Function('element', 'selector', `return Array.from((${queryHandler.queryAll})(element, selector));`);\n        const arrayHandle = await this.evaluateHandle(queryHandlerToArray, updatedSelector);\n        const result = await arrayHandle.evaluate(pageFunction, ...args);\n        await arrayHandle.dispose();\n        /* This `as` exists for the same reason as the `as` in $eval above.\n         * See the comment there for a full explanation.\n         */\n        return result;\n    }\n    /**\n     * The method evaluates the XPath expression relative to the elementHandle.\n     * If there are no such elements, the method will resolve to an empty array.\n     * @param expression - Expression to {@link https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate | evaluate}\n     */\n    async $x(expression) {\n        const arrayHandle = await this.evaluateHandle((element, expression) => {\n            const document = element.ownerDocument || element;\n            const iterator = document.evaluate(expression, element, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);\n            const array = [];\n            let item;\n            while ((item = iterator.iterateNext()))\n                array.push(item);\n            return array;\n        }, expression);\n        const properties = await arrayHandle.getProperties();\n        await arrayHandle.dispose();\n        const result = [];\n        for (const property of properties.values()) {\n            const elementHandle = property.asElement();\n            if (elementHandle)\n                result.push(elementHandle);\n        }\n        return result;\n    }\n    /**\n     * Resolves to true if the element is visible in the current viewport.\n     */\n    async isIntersectingViewport() {\n        return await this.evaluate(async (element) => {\n            const visibleRatio = await new Promise((resolve) => {\n                const observer = new IntersectionObserver((entries) => {\n                    resolve(entries[0].intersectionRatio);\n                    observer.disconnect();\n                });\n                observer.observe(element);\n            });\n            return visibleRatio > 0;\n        });\n    }\n}\nexports.ElementHandle = ElementHandle;\nfunction computeQuadArea(quad) {\n    // Compute sum of all directed areas of adjacent triangles\n    // https://en.wikipedia.org/wiki/Polygon#Simple_polygons\n    let area = 0;\n    for (let i = 0; i < quad.length; ++i) {\n        const p1 = quad[i];\n        const p2 = quad[(i + 1) % quad.length];\n        area += (p1.x * p2.y - p2.x * p1.y) / 2;\n    }\n    return Math.abs(area);\n}\n"]},"metadata":{},"sourceType":"script"}