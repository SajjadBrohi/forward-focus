{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.debug = void 0;\n\nconst environment_js_1 = require(\"../environment.js\");\n/**\n * A debug function that can be used in any environment.\n *\n * @remarks\n *\n * If used in Node, it falls back to the\n * {@link https://www.npmjs.com/package/debug | debug module}. In the browser it\n * uses `console.log`.\n *\n * @param prefix - this will be prefixed to each log.\n * @returns a function that can be called to log to that debug channel.\n *\n * In Node, use the `DEBUG` environment variable to control logging:\n *\n * ```\n * DEBUG=* // logs all channels\n * DEBUG=foo // logs the `foo` channel\n * DEBUG=foo* // logs any channels starting with `foo`\n * ```\n *\n * In the browser, set `window.__PUPPETEER_DEBUG` to a string:\n *\n * ```\n * window.__PUPPETEER_DEBUG='*'; // logs all channels\n * window.__PUPPETEER_DEBUG='foo'; // logs the `foo` channel\n * window.__PUPPETEER_DEBUG='foo*'; // logs any channels starting with `foo`\n * ```\n *\n * @example\n * ```\n * const log = debug('Page');\n *\n * log('new page created')\n * // logs \"Page: new page created\"\n * ```\n */\n\n\nexports.debug = prefix => {\n  if (environment_js_1.isNode) {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    return require('debug')(prefix);\n  }\n\n  return (...logArgs) => {\n    const debugLevel = globalThis.__PUPPETEER_DEBUG;\n    if (!debugLevel) return;\n    const everythingShouldBeLogged = debugLevel === '*';\n    const prefixMatchesDebugLevel = everythingShouldBeLogged || (\n    /**\n     * If the debug level is `foo*`, that means we match any prefix that\n     * starts with `foo`. If the level is `foo`, we match only the prefix\n     * `foo`.\n     */\n    debugLevel.endsWith('*') ? prefix.startsWith(debugLevel) : prefix === debugLevel);\n    if (!prefixMatchesDebugLevel) return; // eslint-disable-next-line no-console\n\n    console.log(`${prefix}:`, ...logArgs);\n  };\n};","map":{"version":3,"sources":["C:/Users/Sajjad Brohi/JavaScript Projects/RESTful API/packages/client/node_modules/puppeteer/lib/cjs/puppeteer/common/Debug.js"],"names":["Object","defineProperty","exports","value","debug","environment_js_1","require","prefix","isNode","logArgs","debugLevel","globalThis","__PUPPETEER_DEBUG","everythingShouldBeLogged","prefixMatchesDebugLevel","endsWith","startsWith","console","log"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;AAeAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,KAAR,GAAgB,KAAK,CAArB;;AACA,MAAMC,gBAAgB,GAAGC,OAAO,CAAC,mBAAD,CAAhC;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCAJ,OAAO,CAACE,KAAR,GAAiBG,MAAD,IAAY;AACxB,MAAIF,gBAAgB,CAACG,MAArB,EAA6B;AACzB;AACA,WAAOF,OAAO,CAAC,OAAD,CAAP,CAAiBC,MAAjB,CAAP;AACH;;AACD,SAAO,CAAC,GAAGE,OAAJ,KAAgB;AACnB,UAAMC,UAAU,GAAGC,UAAU,CAACC,iBAA9B;AACA,QAAI,CAACF,UAAL,EACI;AACJ,UAAMG,wBAAwB,GAAGH,UAAU,KAAK,GAAhD;AACA,UAAMI,uBAAuB,GAAGD,wBAAwB;AACpD;;;;;AAKCH,IAAAA,UAAU,CAACK,QAAX,CAAoB,GAApB,IACKR,MAAM,CAACS,UAAP,CAAkBN,UAAlB,CADL,GAEKH,MAAM,KAAKG,UARmC,CAAxD;AASA,QAAI,CAACI,uBAAL,EACI,OAfe,CAgBnB;;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAa,GAAEX,MAAO,GAAtB,EAA0B,GAAGE,OAA7B;AACH,GAlBD;AAmBH,CAxBD","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.debug = void 0;\nconst environment_js_1 = require(\"../environment.js\");\n/**\n * A debug function that can be used in any environment.\n *\n * @remarks\n *\n * If used in Node, it falls back to the\n * {@link https://www.npmjs.com/package/debug | debug module}. In the browser it\n * uses `console.log`.\n *\n * @param prefix - this will be prefixed to each log.\n * @returns a function that can be called to log to that debug channel.\n *\n * In Node, use the `DEBUG` environment variable to control logging:\n *\n * ```\n * DEBUG=* // logs all channels\n * DEBUG=foo // logs the `foo` channel\n * DEBUG=foo* // logs any channels starting with `foo`\n * ```\n *\n * In the browser, set `window.__PUPPETEER_DEBUG` to a string:\n *\n * ```\n * window.__PUPPETEER_DEBUG='*'; // logs all channels\n * window.__PUPPETEER_DEBUG='foo'; // logs the `foo` channel\n * window.__PUPPETEER_DEBUG='foo*'; // logs any channels starting with `foo`\n * ```\n *\n * @example\n * ```\n * const log = debug('Page');\n *\n * log('new page created')\n * // logs \"Page: new page created\"\n * ```\n */\nexports.debug = (prefix) => {\n    if (environment_js_1.isNode) {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        return require('debug')(prefix);\n    }\n    return (...logArgs) => {\n        const debugLevel = globalThis.__PUPPETEER_DEBUG;\n        if (!debugLevel)\n            return;\n        const everythingShouldBeLogged = debugLevel === '*';\n        const prefixMatchesDebugLevel = everythingShouldBeLogged ||\n            /**\n             * If the debug level is `foo*`, that means we match any prefix that\n             * starts with `foo`. If the level is `foo`, we match only the prefix\n             * `foo`.\n             */\n            (debugLevel.endsWith('*')\n                ? prefix.startsWith(debugLevel)\n                : prefix === debugLevel);\n        if (!prefixMatchesDebugLevel)\n            return;\n        // eslint-disable-next-line no-console\n        console.log(`${prefix}:`, ...logArgs);\n    };\n};\n"]},"metadata":{},"sourceType":"script"}