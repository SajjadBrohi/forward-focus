{"ast":null,"code":"var _jsxFileName = \"/packages/client/src/App.tsx\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport Header from './components/questions-and-answers/Header';\nimport Footer from './components/questions-and-answers/Footer';\nimport Note from './components/questions-and-answers/Note';\nimport CreateArea from './components/questions-and-answers/CreateArea';\nimport fetchCall from './components/questions-and-answers/FetchCall';\nlet startTimeInterval = false;\n\nasync function fetchNotes() {\n  let reactURI = window.location.href.split(':');\n  let updatedReactURI = reactURI.slice(0, reactURI.length - 1).join(\":\");\n  const response = await fetch(`${updatedReactURI}:4000/articles`);\n  const libraryCapacity = await response.json();\n  return libraryCapacity;\n}\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n\n  if (!startTimeInterval) {\n    setInterval(() => {\n      fetchNotes().then(fetchedNotes => {\n        setNotes(fetchedNotes);\n      });\n    }, 100);\n    startTimeInterval = true;\n  } // function fetchNewestNotes() {\n  // \tfetchNotes().then((fetchedNotes) => {\n  // \t\tsetNotes(fetchedNotes);\n  // \t});\n  // }\n\n\n  function newPost(post) {// fetchNewestNotes();\n    // setNotes((prevValue: any) => {\n    // \treturn [...prevValue, post];\n    // });\n  }\n\n  function deletePost(id) {\n    notes.forEach((note, index) => index === id ? fetchCall(note.title, '', 'DELETE') : ''); // fetchNewestNotes();\n    // setNotes((prevValue: any) => {\n    // \treturn prevValue.filter((post: any, index: number) => index !== id);\n    // });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 4\n    }\n  }), \" \", /*#__PURE__*/React.createElement(CreateArea, {\n    postFunction: newPost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  }), \" \", /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 53\n    }\n  }), notes.map((note, index) => /*#__PURE__*/React.createElement(Note, {\n    id: index,\n    title: note.title,\n    content: note.content,\n    deleteFunction: deletePost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/packages/client/src/App.tsx"],"names":["React","useState","Header","Footer","Note","CreateArea","fetchCall","startTimeInterval","fetchNotes","reactURI","window","location","href","split","updatedReactURI","slice","length","join","response","fetch","libraryCapacity","json","App","notes","setNotes","setInterval","then","fetchedNotes","newPost","post","deletePost","id","forEach","note","index","title","map","content"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,2CAAnB;AACA,OAAOC,MAAP,MAAmB,2CAAnB;AACA,OAAOC,IAAP,MAAiB,yCAAjB;AACA,OAAOC,UAAP,MAAuB,+CAAvB;AACA,OAAOC,SAAP,MAAsB,8CAAtB;AAaA,IAAIC,iBAAiB,GAAG,KAAxB;;AAEA,eAAeC,UAAf,GAA4B;AAC3B,MAAIC,QAAQ,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,GAA3B,CAAf;AACA,MAAIC,eAAe,GAAGL,QAAQ,CAACM,KAAT,CAAe,CAAf,EAAkBN,QAAQ,CAACO,MAAT,GAAkB,CAApC,EAAuCC,IAAvC,CAA4C,GAA5C,CAAtB;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEL,eAAgB,gBAApB,CAA5B;AAEA,QAAMM,eAAe,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA9B;AACA,SAAOD,eAAP;AACA;;AAED,SAASE,GAAT,GAAe;AACd,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBvB,QAAQ,CAAS,EAAT,CAAlC;;AAEA,MAAI,CAACM,iBAAL,EAAwB;AACvBkB,IAAAA,WAAW,CAAC,MAAK;AAChBjB,MAAAA,UAAU,GAAGkB,IAAb,CAAmBC,YAAD,IAAkB;AACnCH,QAAAA,QAAQ,CAACG,YAAD,CAAR;AACA,OAFD;AAGA,KAJU,EAIR,GAJQ,CAAX;AAKApB,IAAAA,iBAAiB,GAAG,IAApB;AACA,GAVa,CAYd;AACA;AACA;AACA;AACA;;;AAEA,WAASqB,OAAT,CAAiBC,IAAjB,EAA6B,CAC5B;AACA;AACA;AACA;AACA;;AAED,WAASC,UAAT,CAAoBC,EAApB,EAAgC;AAC/BR,IAAAA,KAAK,CAACS,OAAN,CAAc,CAACC,IAAD,EAAOC,KAAP,KAAiBA,KAAK,KAAKH,EAAV,GAAezB,SAAS,CAAC2B,IAAI,CAACE,KAAN,EAAa,EAAb,EAAiB,QAAjB,CAAxB,GAAqD,EAApF,EAD+B,CAG/B;AACA;AACA;AACA;AACA;;AAED,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,oBACY,oBAAC,UAAD;AAAY,IAAA,YAAY,EAAEP,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADZ,oBACkD,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADlD,EAEEL,KAAK,CAACa,GAAN,CAAU,CAACH,IAAD,EAAOC,KAAP,kBACV,oBAAC,IAAD;AACC,IAAA,EAAE,EAAEA,KADL;AAEC,IAAA,KAAK,EAAED,IAAI,CAACE,KAFb;AAGC,IAAA,OAAO,EAAEF,IAAI,CAACI,OAHf;AAIC,IAAA,cAAc,EAAEP,UAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CAFF,CADD;AAaA;;AAED,eAAeR,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport Header from './components/questions-and-answers/Header';\nimport Footer from './components/questions-and-answers/Footer';\nimport Note from './components/questions-and-answers/Note';\nimport CreateArea from './components/questions-and-answers/CreateArea';\nimport fetchCall from './components/questions-and-answers/FetchCall';\n\ninterface Note {\n\tkey: number;\n\ttitle: string;\n\tcontent: string;\n}\n\ninterface Post {\n\ttitle: string;\n\tcontent: string;\n}\n\nlet startTimeInterval = false;\n\nasync function fetchNotes() {\n\tlet reactURI = window.location.href.split(':');\n\tlet updatedReactURI = reactURI.slice(0, reactURI.length - 1).join(\":\");\n\tconst response = await fetch(`${updatedReactURI}:4000/articles`);\n\n\tconst libraryCapacity = await response.json();\n\treturn libraryCapacity;\n}\n\nfunction App() {\n\tconst [notes, setNotes] = useState<Note[]>([]);\n\n\tif (!startTimeInterval) {\n\t\tsetInterval(()=> {\n\t\t\tfetchNotes().then((fetchedNotes) => {\n\t\t\t\tsetNotes(fetchedNotes);\n\t\t\t});\n\t\t}, 100)\n\t\tstartTimeInterval = true;\n\t}\n\n\t// function fetchNewestNotes() {\n\t// \tfetchNotes().then((fetchedNotes) => {\n\t// \t\tsetNotes(fetchedNotes);\n\t// \t});\n\t// }\n\n\tfunction newPost(post: Post) {\n\t\t// fetchNewestNotes();\n\t\t// setNotes((prevValue: any) => {\n\t\t// \treturn [...prevValue, post];\n\t\t// });\n\t}\n\n\tfunction deletePost(id: number) {\n\t\tnotes.forEach((note, index) => index === id ? fetchCall(note.title, '', 'DELETE') : '');\n\n\t\t// fetchNewestNotes();\n\t\t// setNotes((prevValue: any) => {\n\t\t// \treturn prevValue.filter((post: any, index: number) => index !== id);\n\t\t// });\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Header /> <CreateArea postFunction={newPost} /> <Footer />\n\t\t\t{notes.map((note, index) => (\n\t\t\t\t<Note\n\t\t\t\t\tid={index}\n\t\t\t\t\ttitle={note.title}\n\t\t\t\t\tcontent={note.content}\n\t\t\t\t\tdeleteFunction={deletePost}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}