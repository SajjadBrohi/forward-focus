{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileChooser = void 0;\n\nconst assert_js_1 = require(\"./assert.js\");\n/**\n * File choosers let you react to the page requesting for a file.\n * @remarks\n * `FileChooser` objects are returned via the `page.waitForFileChooser` method.\n * @example\n * An example of using `FileChooser`:\n * ```js\n * const [fileChooser] = await Promise.all([\n *   page.waitForFileChooser(),\n *   page.click('#upload-file-button'), // some button that triggers file selection\n * ]);\n * await fileChooser.accept(['/tmp/myfile.pdf']);\n * ```\n * **NOTE** In browsers, only one file chooser can be opened at a time.\n * All file choosers must be accepted or canceled. Not doing so will prevent\n * subsequent file choosers from appearing.\n */\n\n\nclass FileChooser {\n  /**\n   * @internal\n   */\n  constructor(element, event) {\n    this._handled = false;\n    this._element = element;\n    this._multiple = event.mode !== 'selectSingle';\n  }\n  /**\n   * Whether file chooser allow for {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#attr-multiple | multiple} file selection.\n   */\n\n\n  isMultiple() {\n    return this._multiple;\n  }\n  /**\n   * Accept the file chooser request with given paths.\n   * @param filePaths - If some of the  `filePaths` are relative paths,\n   * then they are resolved relative to the {@link https://nodejs.org/api/process.html#process_process_cwd | current working directory}.\n   */\n\n\n  async accept(filePaths) {\n    assert_js_1.assert(!this._handled, 'Cannot accept FileChooser which is already handled!');\n    this._handled = true;\n    await this._element.uploadFile(...filePaths);\n  }\n  /**\n   * Closes the file chooser without selecting any files.\n   */\n\n\n  async cancel() {\n    assert_js_1.assert(!this._handled, 'Cannot cancel FileChooser which is already handled!');\n    this._handled = true;\n  }\n\n}\n\nexports.FileChooser = FileChooser;","map":{"version":3,"sources":["C:/Users/Sajjad Brohi/JavaScript Projects/RESTful API/packages/client/node_modules/puppeteer/lib/cjs/puppeteer/common/FileChooser.js"],"names":["Object","defineProperty","exports","value","FileChooser","assert_js_1","require","constructor","element","event","_handled","_element","_multiple","mode","isMultiple","accept","filePaths","assert","uploadFile","cancel"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;AAeAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsB,KAAK,CAA3B;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,aAAD,CAA3B;AACA;;;;;;;;;;;;;;;;;;;AAiBA,MAAMF,WAAN,CAAkB;AACd;;;AAGAG,EAAAA,WAAW,CAACC,OAAD,EAAUC,KAAV,EAAiB;AACxB,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,QAAL,GAAgBH,OAAhB;AACA,SAAKI,SAAL,GAAiBH,KAAK,CAACI,IAAN,KAAe,cAAhC;AACH;AACD;;;;;AAGAC,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKF,SAAZ;AACH;AACD;;;;;;;AAKA,QAAMG,MAAN,CAAaC,SAAb,EAAwB;AACpBX,IAAAA,WAAW,CAACY,MAAZ,CAAmB,CAAC,KAAKP,QAAzB,EAAmC,qDAAnC;AACA,SAAKA,QAAL,GAAgB,IAAhB;AACA,UAAM,KAAKC,QAAL,CAAcO,UAAd,CAAyB,GAAGF,SAA5B,CAAN;AACH;AACD;;;;;AAGA,QAAMG,MAAN,GAAe;AACXd,IAAAA,WAAW,CAACY,MAAZ,CAAmB,CAAC,KAAKP,QAAzB,EAAmC,qDAAnC;AACA,SAAKA,QAAL,GAAgB,IAAhB;AACH;;AA/Ba;;AAiClBR,OAAO,CAACE,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FileChooser = void 0;\nconst assert_js_1 = require(\"./assert.js\");\n/**\n * File choosers let you react to the page requesting for a file.\n * @remarks\n * `FileChooser` objects are returned via the `page.waitForFileChooser` method.\n * @example\n * An example of using `FileChooser`:\n * ```js\n * const [fileChooser] = await Promise.all([\n *   page.waitForFileChooser(),\n *   page.click('#upload-file-button'), // some button that triggers file selection\n * ]);\n * await fileChooser.accept(['/tmp/myfile.pdf']);\n * ```\n * **NOTE** In browsers, only one file chooser can be opened at a time.\n * All file choosers must be accepted or canceled. Not doing so will prevent\n * subsequent file choosers from appearing.\n */\nclass FileChooser {\n    /**\n     * @internal\n     */\n    constructor(element, event) {\n        this._handled = false;\n        this._element = element;\n        this._multiple = event.mode !== 'selectSingle';\n    }\n    /**\n     * Whether file chooser allow for {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#attr-multiple | multiple} file selection.\n     */\n    isMultiple() {\n        return this._multiple;\n    }\n    /**\n     * Accept the file chooser request with given paths.\n     * @param filePaths - If some of the  `filePaths` are relative paths,\n     * then they are resolved relative to the {@link https://nodejs.org/api/process.html#process_process_cwd | current working directory}.\n     */\n    async accept(filePaths) {\n        assert_js_1.assert(!this._handled, 'Cannot accept FileChooser which is already handled!');\n        this._handled = true;\n        await this._element.uploadFile(...filePaths);\n    }\n    /**\n     * Closes the file chooser without selecting any files.\n     */\n    async cancel() {\n        assert_js_1.assert(!this._handled, 'Cannot cancel FileChooser which is already handled!');\n        this._handled = true;\n    }\n}\nexports.FileChooser = FileChooser;\n"]},"metadata":{},"sourceType":"script"}