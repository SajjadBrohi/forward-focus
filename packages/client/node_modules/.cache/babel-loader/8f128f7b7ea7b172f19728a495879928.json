{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getQueryHandlerAndSelector = exports.clearQueryHandlers = exports.customQueryHandlers = exports.unregisterCustomQueryHandler = exports.registerCustomQueryHandler = void 0;\n\nconst _customQueryHandlers = new Map();\n\nfunction registerCustomQueryHandler(name, handler) {\n  if (_customQueryHandlers.get(name)) throw new Error(`A custom query handler named \"${name}\" already exists`);\n  const isValidName = /^[a-zA-Z]+$/.test(name);\n  if (!isValidName) throw new Error(`Custom query handler names may only contain [a-zA-Z]`);\n\n  _customQueryHandlers.set(name, handler);\n}\n\nexports.registerCustomQueryHandler = registerCustomQueryHandler;\n/**\n * @param {string} name\n */\n\nfunction unregisterCustomQueryHandler(name) {\n  _customQueryHandlers.delete(name);\n}\n\nexports.unregisterCustomQueryHandler = unregisterCustomQueryHandler;\n\nfunction customQueryHandlers() {\n  return _customQueryHandlers;\n}\n\nexports.customQueryHandlers = customQueryHandlers;\n\nfunction clearQueryHandlers() {\n  _customQueryHandlers.clear();\n}\n\nexports.clearQueryHandlers = clearQueryHandlers;\n\nfunction getQueryHandlerAndSelector(selector) {\n  const defaultHandler = {\n    queryOne: (element, selector) => element.querySelector(selector),\n    queryAll: (element, selector) => element.querySelectorAll(selector)\n  };\n  const hasCustomQueryHandler = /^[a-zA-Z]+\\//.test(selector);\n  if (!hasCustomQueryHandler) return {\n    updatedSelector: selector,\n    queryHandler: defaultHandler\n  };\n  const index = selector.indexOf('/');\n  const name = selector.slice(0, index);\n  const updatedSelector = selector.slice(index + 1);\n  const queryHandler = customQueryHandlers().get(name);\n  if (!queryHandler) throw new Error(`Query set to use \"${name}\", but no query handler of that name was found`);\n  return {\n    updatedSelector,\n    queryHandler\n  };\n}\n\nexports.getQueryHandlerAndSelector = getQueryHandlerAndSelector;","map":{"version":3,"sources":["C:/Users/Sajjad Brohi/JavaScript Projects/RESTful API/packages/client/node_modules/puppeteer/lib/cjs/puppeteer/common/QueryHandler.js"],"names":["Object","defineProperty","exports","value","getQueryHandlerAndSelector","clearQueryHandlers","customQueryHandlers","unregisterCustomQueryHandler","registerCustomQueryHandler","_customQueryHandlers","Map","name","handler","get","Error","isValidName","test","set","delete","clear","selector","defaultHandler","queryOne","element","querySelector","queryAll","querySelectorAll","hasCustomQueryHandler","updatedSelector","queryHandler","index","indexOf","slice"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;AAeAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,0BAAR,GAAqCF,OAAO,CAACG,kBAAR,GAA6BH,OAAO,CAACI,mBAAR,GAA8BJ,OAAO,CAACK,4BAAR,GAAuCL,OAAO,CAACM,0BAAR,GAAqC,KAAK,CAAjL;;AACA,MAAMC,oBAAoB,GAAG,IAAIC,GAAJ,EAA7B;;AACA,SAASF,0BAAT,CAAoCG,IAApC,EAA0CC,OAA1C,EAAmD;AAC/C,MAAIH,oBAAoB,CAACI,GAArB,CAAyBF,IAAzB,CAAJ,EACI,MAAM,IAAIG,KAAJ,CAAW,iCAAgCH,IAAK,kBAAhD,CAAN;AACJ,QAAMI,WAAW,GAAG,cAAcC,IAAd,CAAmBL,IAAnB,CAApB;AACA,MAAI,CAACI,WAAL,EACI,MAAM,IAAID,KAAJ,CAAW,sDAAX,CAAN;;AACJL,EAAAA,oBAAoB,CAACQ,GAArB,CAAyBN,IAAzB,EAA+BC,OAA/B;AACH;;AACDV,OAAO,CAACM,0BAAR,GAAqCA,0BAArC;AACA;;;;AAGA,SAASD,4BAAT,CAAsCI,IAAtC,EAA4C;AACxCF,EAAAA,oBAAoB,CAACS,MAArB,CAA4BP,IAA5B;AACH;;AACDT,OAAO,CAACK,4BAAR,GAAuCA,4BAAvC;;AACA,SAASD,mBAAT,GAA+B;AAC3B,SAAOG,oBAAP;AACH;;AACDP,OAAO,CAACI,mBAAR,GAA8BA,mBAA9B;;AACA,SAASD,kBAAT,GAA8B;AAC1BI,EAAAA,oBAAoB,CAACU,KAArB;AACH;;AACDjB,OAAO,CAACG,kBAAR,GAA6BA,kBAA7B;;AACA,SAASD,0BAAT,CAAoCgB,QAApC,EAA8C;AAC1C,QAAMC,cAAc,GAAG;AACnBC,IAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUH,QAAV,KAAuBG,OAAO,CAACC,aAAR,CAAsBJ,QAAtB,CADd;AAEnBK,IAAAA,QAAQ,EAAE,CAACF,OAAD,EAAUH,QAAV,KAAuBG,OAAO,CAACG,gBAAR,CAAyBN,QAAzB;AAFd,GAAvB;AAIA,QAAMO,qBAAqB,GAAG,eAAeX,IAAf,CAAoBI,QAApB,CAA9B;AACA,MAAI,CAACO,qBAAL,EACI,OAAO;AAAEC,IAAAA,eAAe,EAAER,QAAnB;AAA6BS,IAAAA,YAAY,EAAER;AAA3C,GAAP;AACJ,QAAMS,KAAK,GAAGV,QAAQ,CAACW,OAAT,CAAiB,GAAjB,CAAd;AACA,QAAMpB,IAAI,GAAGS,QAAQ,CAACY,KAAT,CAAe,CAAf,EAAkBF,KAAlB,CAAb;AACA,QAAMF,eAAe,GAAGR,QAAQ,CAACY,KAAT,CAAeF,KAAK,GAAG,CAAvB,CAAxB;AACA,QAAMD,YAAY,GAAGvB,mBAAmB,GAAGO,GAAtB,CAA0BF,IAA1B,CAArB;AACA,MAAI,CAACkB,YAAL,EACI,MAAM,IAAIf,KAAJ,CAAW,qBAAoBH,IAAK,gDAApC,CAAN;AACJ,SAAO;AACHiB,IAAAA,eADG;AAEHC,IAAAA;AAFG,GAAP;AAIH;;AACD3B,OAAO,CAACE,0BAAR,GAAqCA,0BAArC","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getQueryHandlerAndSelector = exports.clearQueryHandlers = exports.customQueryHandlers = exports.unregisterCustomQueryHandler = exports.registerCustomQueryHandler = void 0;\nconst _customQueryHandlers = new Map();\nfunction registerCustomQueryHandler(name, handler) {\n    if (_customQueryHandlers.get(name))\n        throw new Error(`A custom query handler named \"${name}\" already exists`);\n    const isValidName = /^[a-zA-Z]+$/.test(name);\n    if (!isValidName)\n        throw new Error(`Custom query handler names may only contain [a-zA-Z]`);\n    _customQueryHandlers.set(name, handler);\n}\nexports.registerCustomQueryHandler = registerCustomQueryHandler;\n/**\n * @param {string} name\n */\nfunction unregisterCustomQueryHandler(name) {\n    _customQueryHandlers.delete(name);\n}\nexports.unregisterCustomQueryHandler = unregisterCustomQueryHandler;\nfunction customQueryHandlers() {\n    return _customQueryHandlers;\n}\nexports.customQueryHandlers = customQueryHandlers;\nfunction clearQueryHandlers() {\n    _customQueryHandlers.clear();\n}\nexports.clearQueryHandlers = clearQueryHandlers;\nfunction getQueryHandlerAndSelector(selector) {\n    const defaultHandler = {\n        queryOne: (element, selector) => element.querySelector(selector),\n        queryAll: (element, selector) => element.querySelectorAll(selector),\n    };\n    const hasCustomQueryHandler = /^[a-zA-Z]+\\//.test(selector);\n    if (!hasCustomQueryHandler)\n        return { updatedSelector: selector, queryHandler: defaultHandler };\n    const index = selector.indexOf('/');\n    const name = selector.slice(0, index);\n    const updatedSelector = selector.slice(index + 1);\n    const queryHandler = customQueryHandlers().get(name);\n    if (!queryHandler)\n        throw new Error(`Query set to use \"${name}\", but no query handler of that name was found`);\n    return {\n        updatedSelector,\n        queryHandler,\n    };\n}\nexports.getQueryHandlerAndSelector = getQueryHandlerAndSelector;\n"]},"metadata":{},"sourceType":"script"}